openapi: 3.0.3
info:
  title: OnlyDust Backoffice API
  description: OnlyDust Backoffice API
  version: 1.0.0
servers:
  - url: 'http://localhost:9999'
    description: Local
  - url: 'https://develop-bo-api.onlydust.com'
    description: Develop
  - url: 'https://staging-bo-api.onlydust.com'
    description: Staging
  - url: 'https://bo-api.onlydust.com'
    description: Production

paths:
  # BackofficeInvoicingManagement ===============================================================
  /bo/v1/me:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BackofficeMe
      summary: Get my information
      operationId: getMe
      description: |
        Get my information
      responses:
        "200":
          description: 'Me'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/invoices:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeInvoicingManagement
      summary: Get invoice page
      operationId: getInvoicePage
      description: |
        Get invoice page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: invoiceIds
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InvoiceId'
          style: form
        - in: query
          name: internalStatuses
          required: false
          schema:
            type: array
            default: [ TO_REVIEW, REJECTED, APPROVED, PAID ]
            items:
              $ref: '#/components/schemas/InvoiceInternalStatus'
          style: form
      responses:
        "200":
          description: 'Invoice page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicePage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v2/invoices:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BackofficeInvoicingManagement
      summary: Get invoice page
      operationId: getInvoicePageV2
      description: |
        Get invoice page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: invoiceIds
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/InvoiceId'
          style: form
        - in: query
          name: statuses
          required: false
          schema:
            type: array
            default: [ TO_REVIEW, REJECTED, APPROVED, PAID ]
            items:
              $ref: '#/components/schemas/InvoiceInternalStatus'
          style: form
      responses:
        "200":
          description: 'Invoice page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicePageV2'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/invoices/{invoiceId}:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeInvoicingManagement
      summary: Get invoice
      operationId: getInvoice
      description: |
        Get invoice details
      parameters:
        - in: path
          name: invoiceId
          required: true
          schema:
            $ref: '#/components/schemas/InvoiceId'
      responses:
        "200":
          description: 'Invoice'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /bo/v1/invoices/{invoiceId}/status:
    put:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeInvoicingManagement
      summary: Update invoice's status
      operationId: updateInvoiceStatus
      description: |
        Update invoice's status to APPROVED or REJECTED.
      parameters:
        - in: path
          name: invoiceId
          required: true
          schema:
            $ref: '#/components/schemas/InvoiceId'
      requestBody:
        description: Invoice
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInvoiceStatusRequest'
      responses:
        "204":
          description: 'The invoice status has been updated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/external/invoices/{invoiceId}:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeInvoicingManagement
      summary: Download invoice by id
      operationId: downloadInvoice
      parameters:
        - in: path
          name: invoiceId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: 'Pdf as blob'
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # BackofficeAccountingManagement ===============================================================
  /bo/v1/sponsors/{sponsorId}/accounts:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Create a new account for the given sponsor
      operationId: createSponsorAccount
      description: |
        Create a new account for the given sponsor.
        An account allows to:
          - register physical transactions (from the real world) by providing transaction receipts.
          - make funds available for internal transactions between the sponsor and projects (and eventually contributors) by providing an allowance.
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
      requestBody:
        description: Account
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        "200":
          description: 'The account has been created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Get sponsor accounts
      operationId: getSponsorAccounts
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
      responses:
        "200":
          description: 'The sponsor accounts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountListResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/sponsors/{sponsorId}/transactions:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Get the list of all transactions related to this sponsor
      operationId: getSponsorTransactionHistory
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'The sponsor transaction history'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHistoryPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/sponsor-accounts/{accountId}/allowance:
    put:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Update the allowance of the given account.
      operationId: updateAccountAllowance
      description: |
        Update the allowance of the given account, making funds available for internal transactions 
        between the sponsor and projects (and eventually contributors).
        
        Specify the amount to add or remove from the current allowance.
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorAccountId'
      requestBody:
        description: New allowance
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountAllowanceRequest'
      responses:
        "200":
          description: 'The account allowance has been updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/sponsor-accounts/{accountId}/receipts:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Update the balance of the given account by providing a transaction receipt.
      operationId: registerTransactionReceipt
      description: |
        Update the (physical) balance of the given account by providing a transaction receipt (from the real world).
        This will return an error if the new balance is negative.
        This will return an error if the receipt's network is different from the account's network.
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorAccountId'
      requestBody:
        description: Transaction receipt to register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTransactionReceiptRequest'
      responses:
        "200":
          description: 'The transaction receipt has been registered and account balance has been updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionReceipt'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/sponsor-accounts/{accountId}/receipts/{receiptId}:
    delete:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Update the balance of the given account by removing a transaction receipt.
      operationId: removeTransactionReceipt
      description: |
        Update the (physical) balance of the given account by removing a transaction receipt (from the real world).
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorAccountId'
        - in: path
          name: receiptId
          required: true
          schema:
            $ref: '#/components/schemas/TransactionReceiptId'
      responses:
        "200":
          description: 'The transaction receipt has been removed and the account balance has been updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/sponsor-accounts/{accountId}:
    patch:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Update some attributes of the account
      operationId: updateAccountAttributes
      description: |
        Update some attributes of the account.
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorAccountId'
      requestBody:
        description: Account attributes to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
      responses:
        "200":
          description: 'The account has been updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/projects/{projectId}/budgets/allocate:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Allocate a budget to a project
      operationId: allocateBudgetToProject
      description: Allocate a budget to a project
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: Budget to allocate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectBudgetAllocationRequest'
      responses:
        "204":
          description: 'The funds have been allocated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/projects/{projectId}/budgets/unallocate:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Refund a sponsor by unallocating funds from a project
      operationId: unallocateBudgetFromProject
      description: Refund a sponsor
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: Budget to unallocate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectBudgetAllocationRequest'
      responses:
        "204":
          description: 'The funds have been unallocated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/rewards/{rewardId}/pay:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Pay a reward
      operationId: payReward
      description: |
        Pay a reward using the transaction reference and recipient account as input.
        The provided reward will be marked as complete.
      parameters:
        - in: path
          name: rewardId
          required: true
          schema:
            $ref: '#/components/schemas/RewardId'
      requestBody:
        description: Payment information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayRewardRequest'
      responses:
        "204":
          description: 'The reward has been marked as complete'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/rewards:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Get all (paginated) rewards
      operationId: getRewards
      description: |
        Get paginated rewards
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: statuses
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RewardStatusContract'
          style: form
        - in: query
          name: fromRequestedAt
          required: false
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toRequestedAt
          required: false
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: fromProcessedAt
          required: false
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toProcessedAt
          required: false
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
      responses:
        "200":
          description: 'Page of rewards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/rewards/csv:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Export rewards in a CSV
      operationId: exportRewardsCSV
      description: |
        Export rewards in a CSV
      parameters:
        - in: query
          name: statuses
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RewardStatusContract'
          style: form
        - in: query
          name: fromRequestedAt
          required: false
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toRequestedAt
          required: false
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: fromProcessedAt
          required: false
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toProcessedAt
          required: false
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
      responses:
        "200":
          description: 'CSV of rewards'
          content:
            text/csv:
              schema:
                type: string
              example: |-
                Project,Recipient,Recipient Github,Amount,Currency,Contributions,Status,Requested at,Processed at,Transaction Hash,Payout information,Pretty ID,Sponsors,Recipient email,Verification status,Account type,Invoice number,Invoice id,Budget,Batch payments,Batch payment info,Conversion rate,Dollar Amount
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/rewards/search:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Search rewards
      operationId: searchRewards
      description: |
        Search rewards
      requestBody:
        description: Payment information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRewardsRequest'
      responses:
        "200":
          description: 'List of rewards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchRewardsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/rewards/batch-payments:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Create a batch payments for a given list of invoice ids
      operationId: createBatchPayments
      description: |
        Create a batch payments for a given list of invoice ids
      requestBody:
        description: List of invoice ids
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBatchPaymentRequest'
      responses:
        "200":
          description: 'List of batch payment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPaymentsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Get batch payments
      operationId: getBatchPayments
      description: |
        Get page of paid batch payments
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: statuses
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BatchPaymentStatus'
          style: form
      responses:
        "200":
          description: 'Page of paid batch payments'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPaymentPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/rewards/batch-payments/{batchPaymentId}:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Get batch payment details
      operationId: getBatchPayment
      description: |
        Get batch payment details
      parameters:
        - in: path
          name: batchPaymentId
          required: true
          schema:
            $ref: '#/components/schemas/PaymentId'
      responses:
        "200":
          description: Batch payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPaymentDetailsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Update batch payment with transaction hash
      operationId: updateBatchPayment
      description: |
        Update batch payment with transaction hash
      parameters:
        - in: path
          name: batchPaymentId
          required: true
          schema:
            $ref: '#/components/schemas/PaymentId'
      requestBody:
        description: Transaction hash
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchPaymentRequest'
      responses:
        "204":
          description: 'Batch payment processed'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Delete a batch payment
      operationId: deleteBatchPayment
      description: |
        Delete a batch payment. The batch payment must not be already paid.
      parameters:
        - in: path
          name: batchPaymentId
          required: true
          schema:
            $ref: '#/components/schemas/PaymentId'
      responses:
        "204":
          description: 'Batch payment deleted'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/rewards/notify-payments:
    put:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Notify payments sent
      operationId: notifyRewardsPaid
      description: |
        Notify payments sent
      responses:
        "204":
          description: New paid rewards were notified
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/billing-profiles/{billingProfileId}:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeAccountingManagement
      summary: Get billing profiles by id
      operationId: getBillingProfilesById
      description: |
        Get billing profiles by id
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      responses:
        "200":
          description: 'billing profiles'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfileResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # BackofficeSponsorManagement ===============================================================
  /bo/v1/sponsors:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeSponsorManagement
      summary: Get sponsor page
      operationId: getOldSponsorPage
      description: |
        Get sponsor page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: projectIds
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
        - in: query
          name: sponsorIds
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
      responses:
        "200":
          description: 'Sponsor page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OldSponsorPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeSponsorManagement
      summary: Add a new sponsor
      operationId: createSponsor
      description: |
        Add a new sponsor
      requestBody:
        description: Sponsor to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorRequest'
      responses:
        "201":
          description: 'Sponsor created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/sponsors/logos:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeSponsorManagement
      summary: Upload a sponsor logo
      operationId: uploadSponsorLogo
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: 'Image uploaded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v2/sponsors:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeSponsorManagement
      summary: Get sponsor page
      operationId: getSponsorPage
      description: |
        Get sponsor page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'Sponsor page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/sponsors/{sponsorId}:
    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeSponsorManagement
      summary: Get sponsor data
      operationId: getSponsor
      description: |
        Get sponsor data
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
      responses:
        "200":
          description: 'Sponsor data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorDetailsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

    put:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeSponsorManagement
      summary: Modify sponsor data
      operationId: updateSponsor
      description: Modify sponsor data
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
      requestBody:
        description: Sponsor data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorRequest'
      responses:
        "200":
          description: 'Sponsor updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /bo/v1/ecosystems:
    get:
      security:
        - apiKey: [ ]
      tags:
        - Backoffice
      summary: Get ecosystem page
      operationId: getEcosystemPage
      description: |
        Get ecosystem page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: projectIds
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
        - in: query
          name: ecosystemIds
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
      responses:
        "200":
          description: 'Ecosystem page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      security:
        - apiKey: [ ]
      tags:
        - Backoffice
      summary: Create ecosystem
      operationId: postEcosystem
      description: |
        Create ecosystem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EcosystemRequest'
      responses:
        "200":
          description: 'Ecosystem page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  # Backoffice ===============================================================
  /bo/v1/repositories:
    get:
      security:
        - apiKey: [ ]
      tags:
        - Backoffice
      summary: Get github repository page
      operationId: getGithubRepositoryPage
      description: |
        Get github repository page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: projectIds
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
      responses:
        "200":
          description: 'Github repository page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubRepositoryPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/project-lead-invitations:
    get:
      security:
        - apiKey: [ ]
      tags:
        - Backoffice
      summary: Get project lead invitations page
      operationId: getProjectLeadInvitationPage
      description: |
        Get project lead invitations page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: ids
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
        - in: query
          name: projectIds
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
      responses:
        "200":
          description: 'Project Lead Invitation page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLeadInvitationPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'


  /bo/v1/users:
    get:
      security:
        - apiKey: [ ]
      tags:
        - Backoffice
      summary: Get user page
      operationId: getUserPage
      description: |
        Get user page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: userIds
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "200":
          description: 'User page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/projects:
    get:
      security:
        - apiKey: [ ]
      tags:
        - Backoffice
      summary: Get project page
      operationId: getOldProjectPage
      description: |
        Get project page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: projectIds
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
          style: form
      responses:
        "200":
          description: 'Project page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OldProjectPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v2/projects:
    get:
      security:
        - apiKey: [ ]
      tags:
        - Backoffice
      summary: Get project page
      operationId: getProjectPage
      description: |
        Get project page
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: search
          required: false
          schema:
            type: string
      responses:
        "200":
          description: 'Project page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  # BackofficeCurrencyManagement ===============================================================

  /bo/v1/currencies:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeCurrencyManagement
      summary: Add support of a new currency
      operationId: createCurrency
      description: Add support of a new currency
      requestBody:
        description: Currency to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyCreateRequest'
      responses:
        "200":
          description: 'Currency is now supported'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

    get:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeCurrencyManagement
      summary: List all supported currencies
      operationId: listCurrencies
      description: List all supported currencies
      responses:
        "200":
          description: 'List of all supported currencies'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyListResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/currencies/{currencyId}:
    put:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeCurrencyManagement
      summary: Modify currency data
      operationId: updateCurrency
      description: Modify currency data
      parameters:
        - in: path
          name: currencyId
          required: true
          schema:
            $ref: '#/components/schemas/CurrencyId'
      requestBody:
        description: Currency data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyUpdateRequest'
      responses:
        "200":
          description: 'Currency has been updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /bo/v1/currencies/logos:
    post:
      security:
        - apiKey: [ ]
      tags:
        - BackofficeCurrencyManagement
      summary: Upload a currency logo
      operationId: uploadLogo
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: 'Image uploaded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: Api-Key
  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          example:
            message: Github API is not responding
            status: 500
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          example:
            message: You must be authenticated to make this call
            status: 401
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    BadRequestError:
      description: Bad request
      content:
        application/json:
          example:
            message: The request is invalid
            status: 404
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    NotFoundError:
      description: Not found
      content:
        application/json:
          example:
            message: The requested resource was not found
            status: 404
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'

  schemas:
    # ERRORS ==================================================================
    OnlyDustError:
      type: object
      description: Error contract strongly inspired by JSON problem (rfc7807) specification
      required:
        - message
        - status
        - id
      properties:
        message:
          type: string
          description: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.
          example: Not enough credit.
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 400
        id:
          type: string
          format: uuid
          description: The error id
          example: 4f7c660e-6cf1-4424-b240-e630c4c19069

    MeResponse:
      type: object
      required:
        - email
        - name
        - roles
      properties:
        email:
          type: string
        name:
          type: string
        avatarUrl:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/BackofficeUserRole'

    BackofficeUserRole:
      type: string
      enum:
        - BO_ADMIN
        - BO_READER

    GithubRepositoryPage:
      type: object
      required:
        - contributors
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        githubRepositories:
          type: array
          items:
            $ref: '#/components/schemas/GithubRepositoryResponse'

    OldSponsorPage:
      type: object
      required:
        - sponsors
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/OldSponsorPageItemResponse'

    OldSponsorPageItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        url:
          type: string
        logoUrl:
          type: string
        projectIds:
          type: array
          items:
            type: string
            format: uuid

    SponsorPage:
      type: object
      required:
        - sponsors
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/SponsorPageItemResponse'

    SponsorResponse:
      type: object
      required:
        - id
        - name
        - url
        - logoUrl
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        url:
          type: string
        logoUrl:
          type: string

    SponsorPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/SponsorResponse'
        - type: object
          required:
            - projects
          properties:
            projects:
              type: array
              items:
                $ref: '#/components/schemas/ProjectLinkResponse'

    SponsorDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/SponsorResponse'
        - type: object
          required:
            - availableBudgets
            - projects
          properties:
            availableBudgets:
              type: array
              items:
                $ref: '#/components/schemas/SponsorBudgetResponse'
            projects:
              type: array
              items:
                $ref: '#/components/schemas/ProjectWithBudgetResponse'

    EcosystemPage:
      type: object
      required:
        - ecosystems
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        ecosystems:
          type: array
          items:
            $ref: '#/components/schemas/EcosystemPageItemResponse'

    EcosystemPageItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        url:
          type: string
        logoUrl:
          type: string
        projectIds:
          type: array
          items:
            type: string
            format: uuid

    EcosystemRequest:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        logoUrl:
          type: string

    EcosystemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        url:
          type: string
        logoUrl:
          type: string

    UpdateInvoiceStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - APPROVED
            - REJECTED
        rejectionReason:
          type: string
          example: "The invoice is not valid"

    SponsorRequest:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        logoUrl:
          type: string
          format: uri

    CreateAccountRequest:
      type: object
      required:
        - currencyId
      properties:
        currencyId:
          $ref: '#/components/schemas/CurrencyId'
        allowance:
          type: number
        lockedUntil:
          type: string
          format: date-time
        receipt:
          $ref: '#/components/schemas/TransactionReceipt'

    UpdateAccountAllowanceRequest:
      type: object
      required:
        - allowance
      properties:
        allowance:
          type: number

    RegisterTransactionReceiptRequest:
      type: object
      required:
        - receipt
      properties:
        receipt:
          $ref: '#/components/schemas/TransactionReceipt'

    UpdateAccountRequest:
      type: object
      properties:
        lockedUntil:
          type: string
          format: date-time

    AccountBalance:
      type: object
      required:
        - currency
        - initialBalance
        - currentBalance
        - initialAllowance
        - currentAllowance
        - debt
        - awaitingPaymentAmount
      properties:
        currency:
          $ref: '#/components/schemas/ShortCurrencyResponse'
        initialBalance:
          type: number
          description: This is equal to the sum of receipts amounts (including credits and debits) received from the sponsor
        currentBalance:
          type: number
          description: This is equal to the sum of receipts amounts (including credits and debits) received from the sponsor minus what has been paid to contributors
        initialAllowance:
          type: number
          description: This is the initial amount of funds available for internal transactions between the sponsor and projects (and eventually contributors)
        currentAllowance:
          type: number
          description: This is the remaining amount of funds available for internal transactions between the sponsor and projects (and eventually contributors)
        debt:
          type: number
          description: This is difference between the initial balance and initial allowance
        awaitingPaymentAmount:
          type: number
          description: This is the sum of reward amounts which have not been paid yet (in the real world)

    AccountResponse:
      allOf:
        - $ref: '#/components/schemas/AccountBalance'
        - type: object
          required:
            - id
            - sponsorId
            - receipts
          properties:
            id:
              $ref: '#/components/schemas/SponsorAccountId'
            sponsorId:
              $ref: '#/components/schemas/SponsorId'
            lockedUntil:
              type: string
              format: date-time
            receipts:
              type: array
              items:
                $ref: '#/components/schemas/TransactionReceipt'

    AccountListResponse:
      type: object
      required:
        - accounts
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'

    TransactionRequest:
      type: object
      required:
        - type
        - amount
        - currencyId
        - receipt
      properties:
        type:
          $ref: '#/components/schemas/TransactionType'
        amount:
          type: number
        currencyId:
          $ref: '#/components/schemas/CurrencyId'
        lockedUntil:
          type: string
          format: date-time
        receipt:
          $ref: '#/components/schemas/TransactionReceipt'

    TransactionResponse:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/TransactionId'

    TransactionType:
      type: string
      enum:
        - CREDIT
        - DEBIT

    TransactionId:
      type: string
      format: uuid

    TransactionReceipt:
      type: object
      required:
        - reference
        - amount
        - network
        - thirdPartyName
        - thirdPartyAccountNumber
      properties:
        id:
          $ref: '#/components/schemas/TransactionReceiptId'
        reference:
          type: string
        amount:
          type: number
        network:
          $ref: '#/components/schemas/TransactionNetwork'
        thirdPartyName:
          type: string
          description: Name of the third party for which the transaction has been made
        thirdPartyAccountNumber:
          type: string
          description: IBAN, account number, ENS or wallet address

    TransactionNetwork:
      type: string
      enum:
        - SEPA
        - ETHEREUM
        - OPTIMISM
        - STARKNET
        - APTOS

    ProjectId:
      type: string
      format: uuid

    TransactionReceiptId:
      type: string
      format: uuid

    ProjectBudgetAllocationRequest:
      type: object
      required:
        - sponsorAccountId
        - amount
      properties:
        sponsorAccountId:
          $ref: '#/components/schemas/SponsorAccountId'
        amount:
          type: number

    PayRewardRequest:
      type: object
      required:
        - network
        - reference
        - recipientAccount
      properties:
        network:
          $ref: '#/components/schemas/TransactionNetwork'
        reference:
          type: string
        recipientAccount:
          type: string

    Technologies:
      type: object
      description: List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
      additionalProperties:
        type: integer
        format: int64
      example:
        Rust: 91283
        Go: 12388
        Java: 1233
    GithubRepositoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          type: string
        name:
          type: string
        technologies:
          $ref: '#/components/schemas/Technologies'
        projectId:
          type: string
          format: uuid

    ProjectLeadInvitationPage:
      type: object
      required:
        - contributors
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        project_lead_invitations:
          type: array
          items:
            $ref: '#/components/schemas/ProjectLeadInvitationResponse'
    ProjectLeadInvitationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'


    UserPage:
      type: object
      required:
        - users
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserPageItemResponse'
    UserPageItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        isCompany:
          type: boolean
        companyName:
          type: string
        companyNum:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        address:
          type: string
        country:
          type: string
        telegram:
          type: string
        twitter:
          type: string
        discord:
          type: string
        linkedin:
          type: string
        whatsapp:
          type: string
        bic:
          type: string
        iban:
          type: string
        ens:
          type: string
        ethAddress:
          type: string
        aptosAddress:
          type: string
        optimismAddress:
          type: string
        starknetAddress:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastSeenAt:
          type: string
          format: date-time
        email:
          type: string
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'
        githubLogin:
          type: string
        githubHtmlUrl:
          type: string
        githubAvatarUrl:
          type: string
        bio:
          type: string
        location:
          type: string
        website:
          type: string
        lookingForAJob:
          type: boolean
        weeklyAllocatedTime:
          type: string
        languages:
          type: array
          items:
            type: string
        tcAcceptedAt:
          type: string
        onboardingCompletedAt:
          type: string
          format: date-time
        verificationStatus:
          $ref: '#/components/schemas/VerificationStatus'
        usEntity:
          type: boolean


    VerificationStatus:
      type: string
      enum:
        - NOT_STARTED
        - STARTED
        - UNDER_REVIEW
        - VERIFIED
        - REJECTED
        - CLOSED

    InvoicePage:
      type: object
      required:
        - invoices
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/InvoicePageItemResponse'
    InvoicePageItemResponse:
      type: object
      required:
        - id
        - status
        - internalStatus
        - createdAt
        - dueAt
        - amount
        - currency
        - rewardIds
        - downloadUrl
      properties:
        id:
          $ref: '#/components/schemas/InvoiceId'
        status:
          $ref: '#/components/schemas/InvoiceStatus'
        internalStatus:
          $ref: '#/components/schemas/InvoiceInternalStatus'
        createdAt:
          type: string
          format: date-time
        dueAt:
          type: string
          format: date-time
        amount:
          type: number
        currency:
          $ref: '#/components/schemas/ShortCurrencyResponse'
        rewardIds:
          type: array
          items:
            $ref: '#/components/schemas/RewardId'
        downloadUrl:
          type: string
          format: uri

    InvoiceLinkResponse:
      type: object
      required:
        - id
        - number
        - status
      properties:
        id:
          $ref: '#/components/schemas/InvoiceId'
        number:
          type: string
        status:
          $ref: '#/components/schemas/InvoiceInternalStatus'

    InvoiceResponse:
      type: object
      required:
        - id
        - number
        - status
        - billingProfile
        - createdAt
        - createdBy
        - totalEquivalent
        - rewardsPerNetwork
      properties:
        id:
          $ref: '#/components/schemas/InvoiceId'
        number:
          type: string
        status:
          $ref: '#/components/schemas/InvoiceInternalStatus'
        billingProfile:
          $ref: '#/components/schemas/BillingProfileResponse'
        rejectionReason:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/UserResponse'
        totalEquivalent:
          $ref: '#/components/schemas/MoneyResponse'
        rewardsPerNetwork:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceRewardsPerNetwork'

    KycResponse:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
          format: date-time
        address:
          type: string
        country:
          type: string
          deprecated: true
        countryCode:
          type: string
          format: iso-country-code
        usCitizen:
          type: boolean
        idDocumentType:
          type: string
          enum:
            - PASSPORT
            - ID_CARD
            - RESIDENCE_PERMIT
            - DRIVER_LICENSE
        idDocumentNumber:
          type: string
        validUntil:
          type: string
          format: date-time
        idDocumentCountryCode:
          type: string
        sumsubUrl:
          type: string

    KybResponse:
      type: object
      properties:
        name:
          type: string
        registrationNumber:
          type: string
        registrationDate:
          type: string
          format: date-time
        address:
          type: string
        country:
          deprecated: true
          type: string
        countryCode:
          type: string
          format: iso-country-code
        usEntity:
          type: boolean
        subjectToEuropeVAT:
          type: boolean
        euVATNumber:
          type: string
        sumsubUrl:
          type: string

    InvoiceRewardsPerNetwork:
      type: object
      required:
        - network
        - billingAccountNumber
        - dollarsEquivalent
        - totalPerCurrency
        - rewards
      properties:
        network:
          $ref: '#/components/schemas/TransactionNetwork'
        billingAccountNumber:
          type: string
          description: IBAN, account number, ENS or wallet address
        totalUsdEquivalent:
          type: number
        totalsPerCurrency:
          type: array
          items:
            $ref: '#/components/schemas/TotalMoneyWithUsdEquivalentResponse'
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceRewardResponse'

    InvoicePageV2:
      type: object
      required:
        - invoices
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        invoices:
          type: array
          items:
            $ref: '#/components/schemas/InvoicePageItemV2'
    InvoicePageItemV2:
      type: object
      required:
        - id
        - status
        - internalStatus
        - billingProfile
        - createdAt
        - totalAmount
        - totalAmountCurrency
        - rewardCount
        - amounts
      properties:
        id:
          $ref: '#/components/schemas/InvoiceId'
        status:
          $ref: '#/components/schemas/InvoiceInternalStatus'
        billingProfile:
          $ref: '#/components/schemas/BillingProfileResponse'
        createdAt:
          type: string
          format: date-time
        rewardCount:
          type: integer
        totalUsdEquivalent:
          type: number
        totalsPerCurrency:
          type: array
          items:
            $ref: '#/components/schemas/TotalMoneyWithUsdEquivalentResponse'

    MoneyResponse:
      type: object
      description: An amount and its currency
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
        currency:
          $ref: '#/components/schemas/ShortCurrencyResponse'

    MoneyWithUsdEquivalentResponse:
      description: |
        Represents an amount with its currency, its equivalent in USD and its
        conversion rate to USD.
      allOf:
        - $ref: '#/components/schemas/MoneyResponse'
        - type: object
          description: An amount and its currency
          properties:
            dollarsEquivalent:
              type: number
            conversionRate:
              type: number

    HistoricalTransactionType:
      type: string
      enum:
        - DEPOSIT
        - ALLOCATION
    
    TotalMoneyWithUsdEquivalentResponse:
      description: |
        Represents a total amount with its currency and the total equivalent in USD.
        Unlike MoneyWithUsdEquivalentResponse, this does not have a conversion rate,
        as it is made out of multiple amounts with potentially different conversion rates.
      allOf:
        - $ref: '#/components/schemas/MoneyResponse'
        - type: object
          description: An amount and its currency
          properties:
            dollarsEquivalent:
              type: number

    BillingProfileId:
      type: string
      format: uuid
      description: Billing profile ID

    UserId:
      type: string
      format: uuid
      description: Billing profile ID

    GithubUserId:
      type: integer
      format: int64
      description: Github User ID

    BillingProfileResponse:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          $ref: '#/components/schemas/BillingProfileId'
        name:
          type: string
          example: Apple Inc.
        type:
          $ref: '#/components/schemas/BillingProfileType'
        verificationStatus:
          $ref: '#/components/schemas/VerificationStatus'
        kyb:
          $ref: '#/components/schemas/KybResponse'
        kyc:
          $ref: '#/components/schemas/KycResponse'
        admins:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'

    GithubUserResponse:
      type: object
      required:
        - githubUserId
        - githubLogin
        - githubAvatarUrl
        - email
      properties:
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'
        githubLogin:
          type: string
          example: ofux
        githubAvatarUrl:
          type: string
          format: uri
        email:
          type: string
          format: email
          example: olivier@foobar.org

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/GithubUserResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/UserId'
            name:
              type: string

    BillingProfileType:
      type: string
      enum:
        - INDIVIDUAL
        - COMPANY
        - SELF_EMPLOYED

    InvoiceInternalStatus:
      type: string
      enum:
        - TO_REVIEW
        - REJECTED
        - APPROVED
        - PAID

    InvoiceStatus:
      type: string
      enum:
        - PROCESSING
        - COMPLETE
        - REJECTED

    ProjectPage:
      type: object
      required:
        - projects
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPageItemResponse'

    OldProjectPage:
      type: object
      required:
        - projects
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        projects:
          type: array
          items:
            $ref: '#/components/schemas/OldProjectPageItemResponse'

    OldProjectPageItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        shortDescription:
          type: string
        longDescription:
          type: string
        moreInfoLinks:
          type: array
          items:
            type: string
        logoUrl:
          type: string
        hiring:
          type: boolean
        rank:
          type: integer
        visibility:
          $ref: '#/components/schemas/ProjectVisibility'
        projectLeads:
          type: array
          items:
            type: string
            format: uuid
        createdAt:
          type: string
          format: date-time
        activeContributors:
          type: integer
          format: int64
        newContributors:
          type: integer
          format: int64
        uniqueRewardedContributors:
          type: integer
          format: int64
        openedIssues:
          type: integer
          format: int64
        contributions:
          type: integer
          format: int64
        dollarsEquivalentAmountSent:
          type: number
        strkAmountSent:
          type: number

    ProjectPageItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        logoUrl:
          type: string

    ProjectVisibility:
      type: string
      enum:
        - PUBLIC
        - PRIVATE

    CurrencyCreateRequest:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/CurrencyType'
        standard:
          $ref: '#/components/schemas/CurrencyStandard'
        blockchain:
          $ref: '#/components/schemas/BlockchainContract'
        address:
          $ref: '#/components/schemas/ContractAddress'
        logoUrl:
          type: string
          format: uri
        description:
          type: string
        code:
          type: string
        decimals:
          type: integer

    CurrencyUpdateRequest:
      type: object
      properties:
        name:
          type: string
        logoUrl:
          type: string
          format: uri
        decimals:
          type: integer
        description:
          type: string

    CurrencyListResponse:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyResponse'

    CurrencyResponse:
      allOf:
        - $ref: '#/components/schemas/ShortCurrencyResponse'
        - type: object
          required:
            - type
            - decimals
          properties:
            type:
              $ref: '#/components/schemas/CurrencyType'
            tokens:
              type: array
              items:
                $ref: '#/components/schemas/Token'
            supportedOn:
              type: array
              items:
                $ref: '#/components/schemas/TransactionNetwork'
            decimals:
              type: integer
            description:
              type: string

    Token:
      type: object
      properties:
        blockchain:
          $ref: '#/components/schemas/BlockchainContract'
        address:
          $ref: '#/components/schemas/ContractAddress'
        decimals:
          type: integer
        symbol:
          type: string
        name:
          type: string

    UploadImageResponse:
      type: object
      properties:
        url:
          type: string
          format: url
          description: The direct URL to the uploaded image
      example:
        url: https://onlydust-app-images.s3.eu-west-1.amazonaws.com/4137005338789730434.png

    ShortCurrencyResponse:
      type: object
      description: Minimal information about a currency
      required:
        - id
        - code
        - name
        - decimals
      properties:
        id:
          $ref: '#/components/schemas/CurrencyId'
        code:
          type: string
          example: USDC
        name:
          type: string
          example: USD Coin
        logoUrl:
          type: string
          format: uri
        decimals:
          type: integer

    SponsorId:
      type: string
      format: uuid

    InvoiceId:
      type: string
      format: uuid

    RewardId:
      type: string
      format: uuid

    SponsorAccountId:
      type: string
      format: uuid

    CurrencyId:
      type: string
      format: uuid

    CurrencyType:
      type: string
      enum:
        - FIAT
        - CRYPTO

    CurrencyStandard:
      type: string
      enum:
        - ISO4217
        - ERC20

    BlockchainContract:
      type: string
      enum:
        - ETHEREUM
        - OPTIMISM
        - STARKNET
        - APTOS

    ContractAddress:
      type: string
      format: hex
    
    SearchRewardsRequest:
      type: object
      required:
        - invoiceIds
      properties:
        invoiceIds:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceId'
    
    SearchRewardsResponse:
      type: object
      required:
        - rewards
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/SearchRewardItemResponse'

    SearchRewardItemResponse:
      type: object
      required:
        - id
        - billingProfileAdmin
        - requestedAt
        - githubUrls
        - project
      properties:
        id:
          $ref: '#/components/schemas/RewardId'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        billingProfile:
          $ref: '#/components/schemas/BillingProfileResponse'
        requestedAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time
        githubUrls:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/RewardStatusContract'
        project:
          $ref: '#/components/schemas/ProjectLinkResponse'
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/SponsorLinkResponse'
        money:
          $ref: '#/components/schemas/MoneyWithUsdEquivalentResponse'

    TransactionHistoryPageResponse:
      type: object
      required:
        - transactions
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionHistoryPageItemResponse'

    TransactionHistoryPageItemResponse:
      type: object
      required:
        - date
        - type
        - amount
        - currency
      properties:
        date:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/HistoricalTransactionType'
        network:
          $ref: '#/components/schemas/TransactionNetwork'
        lockedUntil:
          type: string
          format: date-time
        project:
          $ref: '#/components/schemas/ProjectLinkResponse'
        amount:
          $ref: '#/components/schemas/MoneyWithUsdEquivalentResponse'

    RewardPageResponse:
      type: object
      required:
        - rewards
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/RewardPageItemResponse'
    RewardPageItemResponse:
      type: object
      required:
        - id
        - billingProfileAdmin
        - requestedAt
        - githubUrls
        - project
      properties:
        id:
          $ref: '#/components/schemas/RewardId'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        billingProfile:
          $ref: '#/components/schemas/BillingProfileResponse'
        invoice:
          $ref: '#/components/schemas/InvoiceLinkResponse'
        status:
          $ref: '#/components/schemas/RewardStatusContract'
        requestedAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time
        githubUrls:
          type: array
          items:
            type: string
        paidNotificationDate:
          type: string
          format: date-time
        recipient:
          $ref: '#/components/schemas/RecipientLinkResponse'
        project:
          $ref: '#/components/schemas/ProjectLinkResponse'
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/SponsorLinkResponse'
        money:
          $ref: '#/components/schemas/MoneyWithUsdEquivalentResponse'
        transactionReferences:
          type: array
          items:
            type: string
            example: 0x1234567890abcdef
        paidTo:
          type: array
          items:
            type: string
            example: 0x1234567890abcdef

    RewardStatusContract:
      enum:
        - PENDING_SIGNUP
        - PENDING_BILLING_PROFILE
        - PENDING_VERIFICATION
        - PAYMENT_BLOCKED
        - PAYOUT_INFO_MISSING
        - LOCKED
        - PENDING_REQUEST
        - PROCESSING
        - COMPLETE

    RecipientLinkResponse:
      type: object
      required:
        - login
        - avatarUrl
      properties:
        login:
          type: string
        name:
          type: string
        avatarUrl:
          type: string

    InvoiceRewardResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RewardId'
        paymentId:
          $ref: '#/components/schemas/PaymentId'
        requestedAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/RewardStatusContract'
        githubUrls:
          type: array
          items:
            type: string
        project:
          $ref: '#/components/schemas/ProjectLinkResponse'
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/SponsorLinkResponse'
        money:
          $ref: '#/components/schemas/MoneyWithUsdEquivalentResponse'
        transactionReferences:
          type: array
          items:
            type: string
            example: 0x1234567890abcdef

    ProjectLinkResponse:
      type: object
      required:
        - name
        - logoUrl
      properties:
        name:
          type: string
        logoUrl:
          type: string

    ProjectWithBudgetResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectLinkResponse'
        - type: object
          required:
            - remainingBudgets
          properties:
            remainingBudgets:
              type: array
              items:
                $ref: '#/components/schemas/MoneyResponse'

    SponsorBudgetResponse:
      allOf:
        - $ref: '#/components/schemas/AccountBalance'
        - type: object
          required:
            - lockedAmounts
          properties:
            lockedAmounts:
              type: array
              items:
                type: object
                required:
                  - lockedUntil
                  - amount
                properties:
                  lockedUntil:
                    type: string
                    format: date-time
                  amount:
                    type: number

    SponsorLinkResponse:
      type: object
      required:
        - name
        - avatarUrl
      properties:
        name:
          type: string
        avatarUrl:
          type: string

    PostBatchPaymentRequest:
      type: object
      required:
        - invoiceIds
      properties:
        invoiceIds:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceId'

    PaymentId:
      type: string
      format: uuid
    BatchPaymentsResponse:
      type: object
      required:
        - batchPayments
      properties:
        batchPayments:
          type: array
          items:
            $ref: '#/components/schemas/BatchPaymentResponse'
    BatchPaymentResponse:
      type: object
      required:
        - id
        - csv
        - rewardCount
        - totalAmounts
        - network
      properties:
        id:
          $ref: '#/components/schemas/PaymentId'
        createdAt:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/BatchPaymentStatus'
        csv:
          type: string
        network:
          $ref: '#/components/schemas/TransactionNetwork'
        rewardCount:
          type: integer
          format: int64
        totalUsdEquivalent:
          type: number
        totalsPerCurrency:
          type: array
          items:
            $ref: '#/components/schemas/TotalMoneyWithUsdEquivalentResponse'

    BatchPaymentStatus:
      type: string
      enum:
        - TO_PAY
        - PAID

    BatchPaymentRequest:
      type: object
      required:
        - transactionHash
      properties:
        transactionHash:
          type: string

    BatchPaymentPageResponse:
      required:
        - batchPayments
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        batchPayments:
          type: array
          items:
            $ref: '#/components/schemas/BatchPaymentResponse'

    BatchPaymentDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/BatchPaymentResponse'
        - $ref: '#/components/schemas/SearchRewardsResponse'
        - type: object
          properties:
            csv:
              type: string
            transactionHash:
              type: string
