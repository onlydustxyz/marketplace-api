openapi: 3.0.3
info:
  title: OnlyDust Marketplace API
  description: OnlyDust Marketplace API
  version: 1.0.0
servers:
  - url: 'http://localhost:9999'
    description: Local
  - url: 'https://develop-api.onlydust.com'
    description: Develop
  - url: 'https://staging-api.onlydust.com'
    description: Staging
  - url: 'https://api.onlydust.com'
    description: Production

paths:
  /api/v1/version:
    get:
      tags:
        - Version
      summary: Get API version information
      operationId: getAPIVersion
      responses:
        "200":
          description: 'API Version'
          content:
            application/json:
              schema:
                type: object
                properties:
                  releaseDate:
                    type: string
                    format: date-time
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get caller info
      operationId: getMe
      description: |
        Get the caller info
      responses:
        "200":
          description: 'Minimalist user info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMeResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    patch:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Patch some caller info
      operationId: patchMe
      description: |
        Patch onboarding info of the caller
      requestBody:
        description: 'Patched user info'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMeContract'
      responses:
        "204":
          description: 'The user was patched successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/profile:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get caller profile
      operationId: getMyProfile
      description: |
        Get the whole user profile
      responses:
        "200":
          description: 'Profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserProfileResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Me
      summary: Update caller profile
      operationId: setMyProfile
      description: |
        Set the whole user profile (including private data)
      requestBody:
        description: 'User profile'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
      responses:
        "200":
          description: 'User profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserProfileResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/payout-info:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Caller payout info
      operationId: getMyPayoutInfo
      description: |
        Get payout info of the caller
      responses:
        "200":
          description: 'Payout information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPayoutInformationResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Update caller payout info
      operationId: putMyPayoutInfo
      description: |
        Set payout info of the caller
      requestBody:
        description: 'Payout information'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPayoutInformationRequest'
      responses:
        "200":
          description: 'Payout information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPayoutInformationResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/project-leader-invitations/{projectId}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Accept invitation to lead a project
      operationId: acceptInvitationToLeadProject
      description: |
        Accept invitation to lead a project
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      responses:
        "204":
          description: 'The invitation was accepted successfully. The caller is now a leader of the project.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/rewards:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get caller's rewards
      operationId: getMyRewards
      description: |
        Get the page of all rewards where the recipient is the caller
      parameters:
        - in: query
          name: sort
          description: Sort order
          schema:
            enum:
              - REQUESTED_AT
              - CONTRIBUTION
              - AMOUNT
              - STATUS
        - in: query
          name: direction
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'Page of rewards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyRewardsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/rewards/pending-invoice:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get caller's rewards pending invoice
      operationId: getMyRewardsPendingInvoice
      description: |
        Get the page of all rewards pending invoice where the recipient is the caller
      responses:
        "200":
          description: 'Page of rewards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyRewardsListResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/rewards/amounts:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get caller's rewarded total amounts
      operationId: getMyRewardTotalAmounts
      description: |
        Get caller's rewarded total amounts
      responses:
        "200":
          description: 'My reward total amounts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardTotalAmountsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/contributions:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get caller's contributions
      operationId: getMyContributions
      description: |
        Get contributions of the caller.
      parameters:
        - in: query
          name: types
          description: Contribution type filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ContributionType'
        - in: query
          name: statuses
          description: Contribution status filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ContributionStatus'
        - in: query
          name: projects
          description: Project filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectId'
        - in: query
          name: repositories
          description: Repository filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubRepoId'
        - in: query
          name: sort
          description: Sorting field
          schema:
            $ref: '#/components/schemas/ContributionSort'
        - in: query
          name: direction
          description: Sort direction
          schema:
            type: string
            default: ASC
            enum:
              - ASC
              - DESC
        - in: query
          name: pageIndex
          description: Page number
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          schema:
            type: integer
      
      responses:
        "200":
          description: 'Contribution list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributionPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/me/contributed-projects:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get the list of projects the caller's contributed to
      operationId: getMyContributedProjects
      description: |
        Get the list of projects the caller's contributed to
      parameters:
        - in: query
          name: repositories
          description: Repository filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubRepoId'

      responses:
        "200":
          description: 'Project list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributedProjectsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/contributed-repos:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get the list of github repos the caller's contributed to
      operationId: getMyContributedRepos
      description: |
        Get the list of github repos the caller's contributed to
      parameters:
        - in: query
          name: projects
          description: Project filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectId'

      responses:
        "200":
          description: 'Github repos list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributedReposResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/applications:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Apply to become a project contributor
      operationId: applyOnProject
      description: |
        Apply to become a project contributor
      requestBody:
        description: 'Application'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationRequest'
      responses:
        "204":
          description: 'The application was sent successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/rewards/{rewardId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get my reward by reward Id
      operationId: getMyReward
      description: |
        Get my reward details. Only authenticated user can access this information.
      parameters:
        - in: path
          name: rewardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: 'Reward details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardDetailsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/RewardForbiddenError'
        "404":
          $ref: '#/components/responses/RewardNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/me/rewards/{rewardId}/reward-items:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get my reward items page by reward Id
      operationId: getMyRewardItemsPage
      description: |
        Get my reward items details. Only authenticated user can access this information.
      parameters:
        - in: path
          name: rewardId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: pageIndex
          description: Page number
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          schema:
            type: integer
      responses:
        "200":
          description: 'Reward details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardItemsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/RewardForbiddenError'
        "404":
          $ref: '#/components/responses/RewardNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/technologies:
    get:
      tags:
        - Technologies
      summary: Technologies referenced by OnlyDust
      operationId: getTechnologies
      description: |
        Get the list of all technologies (languages, frameworks, tools, etc.) referenced by OnlyDust
      responses:
        "200":
          description: 'Technologies'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Technologies'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/search:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Users
      summary: Search contributors by login
      operationId: searchContributors
      description: |
        Get the list of all contributors of the project's repos or provided repos who match the login input query.
        If not enough results are found, the search is extended to the 5 best matching github users (by login).
      parameters:
        - in: query
          name: projectId
          description: |
            Allows to trigger internal contributors search within the project's repos.
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: repoIds
          description: |
            Allows to trigger internal contributors search within the provided repos.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubRepoId'
        - in: query
          name: login
          description: login query
          schema:
            type: string
        - in: query
          name: maxInternalContributorCountToTriggerExternalSearch
          description: |
            If the number of internal contributors is greater than this value, the external search is not triggered.
            Default value is 5.
          schema:
            type: integer
        - in: query
          name: maxInternalContributorCountToReturn
          description: |
            Max number of internal contributors that can be returned.
            Default value is 50.
          schema:
            type: integer
        - in: query
          name: externalSearchOnly
          description: |
            If true, only external search is performed.
            Default value is false.
          schema:
            type: boolean
      responses:
        "200":
          description: 'List of contributors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorSearchResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/{githubId}:
    get:
      tags:
        - Users
      summary: Get user profile
      operationId: getUserProfile
      description: |
        Get the publicly available user profile (ie. all data except private data)
      parameters:
        - in: path
          name: githubId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 'User profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfileResponse'
        "404":
          $ref: '#/components/responses/UserNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/login/{githubLogin}:
    get:
      tags:
        - Users
      summary: Get user profile
      operationId: getUserProfileByLogin
      description: |
        Get the publicly available user profile (ie. all data except private data)
      parameters:
        - in: path
          name: githubLogin
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 'User profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfileResponse'
        "404":
          $ref: '#/components/responses/UserNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Create project
      operationId: createProject
      description: |
        Create new project. The caller must be a leader of the project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        "200":
          description: 'Create Project response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get all projects
      operationId: getProjects
      description: |
        Get the (soon to be paginated) list of all projects on the platform that are visible to the caller.
      parameters:
        - in: query
          name: sort
          description: Sort order
          schema:
            type: string
            enum:
              - RANK
              - NAME
              - REPO_COUNT
              - CONTRIBUTOR_COUNT
        - in: query
          name: technologies
          description: Technology filter
          schema:
            type: array
            items:
              type: string
        - in: query
          name: sponsor
          description: Sponsor filter
          schema:
            type: array
            items:
              type: string
        - in: query
          name: mine
          description: Filter mine projects
          schema:
            type: boolean
        - in: query
          name: search
          description: Full text search
          schema:
            type: string
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'List of projects'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPageResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/contributions/{contributionId}:
    get:
      tags:
        - Projects
      summary: Get contribution details
      operationId: getContribution
      description: |
        Get the details of a given contribution.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: contributionId
          required: true
          schema:
            $ref: '#/components/schemas/ContributionId'
      responses:
        "200":
          description: 'Contribution details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributionDetailsResponse'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/ignored-contributions:
    patch:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Update project's ignored contributions
      operationId: updateIgnoredContributions
      description: |
        Update project's ignored contributions. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectIgnoredContributionsRequest'
      responses:
        "204":
          description: 'The list of ignored contributions was updated successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'


  /api/v1/projects/{projectId}:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project details
      operationId: getProject
      description: |
        Get the project if it is visible to the caller.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: includeAllAvailableRepos
          schema:
            type: boolean
      responses:
        "200":
          description: 'The project'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Update project
      operationId: updateProject
      description: |
        Update project. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        "200":
          description: 'Update Project response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProjectResponse'
        "204":
          description: 'The project was updated successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/slug/{slug}:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project details
      operationId: getProjectBySlug
      description: |
        Get the project if it is visible to the caller.
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
        - in: query
          name: includeAllAvailableRepos
          schema:
            type: boolean
      responses:
        "200":
          description: 'The project'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'



  /api/v1/projects/{projectId}/contributors:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get all project contributors
      operationId: getProjectContributors
      description: |
        Get the paginated list of all contributors of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: login
          description: Filter by login (case-insensitive search by login)
          schema:
            type: string
        - in: query
          name: sort
          description: Sort order
          schema:
            type: string
            enum:
              - LOGIN
              - CONTRIBUTION_COUNT
              - REWARD_COUNT
              - EARNED
              - TO_REWARD_COUNT
        - in: query
          name: direction
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'List of project contributors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsPageResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/budgets:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project budgets
      operationId: getProjectBudgets
      description: |
        Get the list of all budgets from this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      responses:
        "200":
          description: 'List of budgets'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBudgetsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewards:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project rewards
      operationId: getProjectRewards
      description: |
        Get the list of all rewards granted from this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: sort
          description: Sort order
          schema:
            enum:
              - REQUESTED_AT
              - CONTRIBUTION
              - AMOUNT
              - STATUS
        - in: query
          name: direction
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'List of rewards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Create reward
      operationId: createReward
      description: |
        Create new reward. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: 'New reward'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewardRequest'
      responses:
        "200":
          description: 'Reward'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRewardResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewards/{rewardId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project reward by reward Id
      operationId: getProjectReward
      description: |
        Get reward details from this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: rewardId
          required: true
          schema:
            $ref: '#/components/schemas/RewardId'
      responses:
        "200":
          description: 'Reward details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardDetailsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/RewardForbiddenError'
        "404":
          $ref: '#/components/responses/RewardNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Create reward
      operationId: cancelReward
      description: |
        Create new reward. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: rewardId
          required: true
          schema:
            $ref: '#/components/schemas/RewardId'
      responses:
        "204":
          description: 'Reward deleted'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'


  /api/v1/projects/{projectId}/rewards/{rewardId}/reward-items:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project reward items page by reward Id
      operationId: getProjectRewardItemsPage
      description: |
        Get reward items details from this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: rewardId
          required: true
          schema:
            $ref: '#/components/schemas/RewardId'
        - in: query
          name: pageIndex
          description: Page number
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          schema:
            type: integer
      responses:
        "200":
          description: 'Reward details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardItemsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/RewardForbiddenError'
        "404":
          $ref: '#/components/responses/RewardNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/contributions:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get contributions of a user within the project
      operationId: getProjectContributions
      description: |
        Get contributions of a user on a given project. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: githubUserId
          required: true
          schema:
            $ref: '#/components/schemas/GithubUserId'
      responses:
        "200":
          description: 'Contribution list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributionPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get rewardable contributions of a user within the project
      operationId: getProjectRewardableContributions
      description: |
        Get rewardable contributions of a user on a given project. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: githubUserId
          required: true
          schema:
            $ref: '#/components/schemas/GithubUserId'
        - in: query
          name: pageIndex
          description: Page number
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          required: true
          schema:
            type: integer
        - in: query
          name: search
          required: false
          schema:
            type: string
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/RewardType'
        - in: query
          name: include_ignored_items
          schema:
            type: boolean
            default: false
            description: True if the response should contain ignored rewardable items
      responses:
        "200":
          description: 'Rewardable contributions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardableItemsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items/other-works:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Create and close issue for a user within the project and returns it as a rewardable item
      operationId: addRewardableOtherWork
      description: |
        Create and close issue for a user within the project and returns it as a rewardable item. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: 'Create issue'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOtherWorkRequest'
      responses:
        "200":
          description: 'Rewardable other work (issue)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardableItemResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items/other-issues:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Index given issue and returns it as a rewardable item
      operationId: addRewardableOtherIssue
      description: |
        Index given issue and returns it as a rewardable item. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: 'Create issue'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOtherIssueRequest'
      responses:
        "200":
          description: 'Rewardable issue'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardableItemResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items/other-pull-requests:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Index given pull request and returns it as a rewardable item
      operationId: addRewardableOtherPullRequest
      description: |
        Index  pull request issue and returns it as a rewardable item. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: 'Create issue'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOtherPullRequestRequest'
      responses:
        "200":
          description: 'Rewardable pull request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardableItemResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/logos:
    post:
      security:
        - { }
      tags:
        - Projects
      summary: Upload a project logo
      operationId: uploadProjectLogo
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: 'Image uploaded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/github/users:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Github
      summary: Search Github user
      operationId: searchGithubUser
      description: |
        Search Github user by login
      parameters:
        - in: query
          name: search
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 'Github user list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubUserListResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/github/users/{githubUserId}/organizations:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Github
      summary: Search Github user's organizations
      operationId: searchGithubUserOrganizations
      description: |
        Search Github user's organizations for github user id
      parameters:
        - in: path
          name: githubUserId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Github user's organization list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GithubOrganizationResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/github/installations/{installationId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Github
      summary: Get Github organization and repositories linked to installation Id
      operationId: getGithubInstallation
      description: |
        Get Github Organization and  Repositories for installation Id
      parameters:
        - in: path
          name: installationId
          required: true
          schema:
            $ref: '#/components/schemas/GithubInstallationId'
      responses:
        "200":
          description: 'Github installation info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallationResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/events/on-contributions-change:
    post:
      security:
        - apiKey: [ ]
      tags:
        - Events
      summary: On contributions change
      operationId: onContributionsChange
      description: |
        Should be called when (at least) a contribution is added or removed from a repo.
      requestBody:
        description: 'Contributions change event'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnContributionsChangeEvent'
      responses:
        "204":
          description: 'Event processed'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: Api-Key

  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          example:
            message: Github API is not responding
            status: 500
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          example:
            message: You must be authenticated to make this call
            status: 401
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    NotFoundError:
      description: Requested resource not found
      content:
        application/json:
          example:
            message: NOT_FOUND
            status: 404
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    ProjectForbiddenError:
      description: Forbidden. The project is not visible to the caller.
      content:
        application/json:
          example:
            message: Access to this project is forbidden
            status: 403
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    RewardNotFoundError:
      description: Reward not found
      content:
        application/json:
          example:
            message: Reward not found
            status: 404
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    RewardForbiddenError:
      description: Forbidden. The reward is not visible to the caller.
      content:
        application/json:
          example:
            message: Access to this reward is forbidden
            status: 403
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    UserNotFoundError:
      description: User not found
      content:
        application/json:
          example:
            message: User not found
            status: 404
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'

  schemas:
    # ERRORS ==================================================================
    OnlyDustError:
      type: object
      description: Error contract strongly inspired by JSON problem (rfc7807) specification
      required:
        - message
        - status
        - id
      properties:
        message:
          type: string
          description: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.
          example: Not enough credit.
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 400
        id:
          type: string
          format: uuid
          description: The error id
          example: 4f7c660e-6cf1-4424-b240-e630c4c19069



    # VALUE OBJECTS ==================================================================
    ContributionId:
      type: string
      description: Contribution ID
      example: 2189e8dc91876fa1686e81b09de33ca7bdca08e80854d4cada02c8288cf03739

    UserId:
      type: string
      format: uuid
      description: OnlyDust user ID

    GithubUserId:
      type: integer
      format: int64
      description: Github user ID (databaseId)
      example: 595505

    GithubRepoId:
      type: integer
      format: int64
      description: Github repo ID (databaseId)
      example: 650626566

    PullRequestId:
      type: string
      description: Github pull request ID (databaseId)
      example: 27218542

    IssueId:
      type: string
      description: Github issue ID (databaseId)
      example: 1678794252

    CodeReviewId:
      type: string
      description: Code review ID
      example: 2189e8dc91876fa1686e81b09de33ca7bdca08e80854d4cada02c8288cf03739

    ProjectId:
      type: string
      format: uuid
      description: OnlyDust project ID

    ProjectSlug:
      type: string
      description: OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
      example: my-awesome-project

    SponsorId:
      type: string
      format: uuid
      description: OnlyDust sponsor ID

    RewardId:
      type: string
      format: uuid
      description: OnlyDust reward ID

    GithubInstallationId:
      type: integer
      format: int64
      description: Github installation ID
      example: 123456

    # RESPONSES ==================================================================
    UserLinkResponse:
      type: object
      required:
        - githubUserId
        - login
        - htmlUrl
        - avatarUrl
      properties:
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'
        login:
          type: string
          description: User's Github login
          example: ofux
        htmlUrl:
          type: string
          format: uri
        avatarUrl:
          type: string
          format: url
          description: Direct URL to user's avatar image
          example: 'https://avatars.githubusercontent.com/u/595505?v=4'

    RegisteredUserLinkResponse:
      required:
        - id
      allOf:
        - $ref: '#/components/schemas/UserLinkResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/UserId'

    PersonIdentity:
      type: object
      properties:
        lastname:
          type: string
          example: Smith
        firstname:
          type: string
          example: John

    CompanyIdentity:
      type: object
      properties:
        name:
          type: string
          example: OnlyDust
        identificationNumber:
          type: string
          description: SIRET or equivalent
          example: 1873-4987-41234
        owner:
          $ref: '#/components/schemas/PersonIdentity'

    UserPayoutInformationResponse:
      type: object
      properties:
        person:
          $ref: '#/components/schemas/PersonIdentity'
        company:
          $ref: '#/components/schemas/CompanyIdentity'
        isCompany:
          type: boolean
        hasValidContactInfo:
          type: boolean
        location:
          type: object
          properties:
            country:
              type: string
              example: France
            city:
              type: string
              example: Paris
            postalCode:
              type: string
              example: 75001
            address:
              type: string
              example: 33 rue de Rivoli
        payoutSettings:
          type: object
          properties:
            hasValidPayoutSettings:
              type: boolean
            usdPreferredMethod:
              type: string
              enum:
                - CRYPTO
                - FIAT
            sepaAccount:
              type: object
              properties:
                bic:
                  type: string
                  example: DAAEFRPPCCT
                iban:
                  type: string
                  example: FR5417569000301995586997O41
            missingSepaAccount:
              type: boolean
            ethAddress:
              type: string
              example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            missingEthWallet:
              type: boolean
            ethName:
              type: string
              example: vitalik.eth
            optimismAddress:
              type: string
              example: 0x72c30fcd1e7bd691ce206cd36bbd87c4c7099545
            missingOptimismWallet:
              type: boolean
            aptosAddress:
              type: string
              example: 0xa645c3bdd0dfd0c3628803075b3b133e8426061dc915ef996cc5ed4cece6d4e5
            missingAptosWallet:
              type: boolean
            starknetAddress:
              type: string
              example: 0x056471aa79e3daebb62185cebee14fb0088b462b04ccf6e60ec9386044bec798
            missingStarknetWallet:
              type: boolean
            missingUsdcWallet:
              type: boolean
    UserPayoutInformationRequest:
      type: object
      properties:
        person:
          $ref: '#/components/schemas/PersonIdentity'
        company:
          $ref: '#/components/schemas/CompanyIdentity'
        isCompany:
          type: boolean
        location:
          type: object
          properties:
            country:
              type: string
              example: France
            city:
              type: string
              example: Paris
            postalCode:
              type: string
              example: 75001
            address:
              type: string
              example: 33 rue de Rivoli
        payoutSettings:
          type: object
          properties:
            usdPreferredMethod:
              type: string
              enum:
                - CRYPTO
                - FIAT
            sepaAccount:
              type: object
              properties:
                bic:
                  type: string
                  example: DAAEFRPPCCT
                iban:
                  type: string
                  example: FR5417569000301995586997O41
            ethAddress:
              type: string
              example: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
            ethName:
              type: string
              example: vitalik.eth
            optimismAddress:
              type: string
              example: 0x72c30fcd1e7bd691ce206cd36bbd87c4c7099545
            aptosAddress:
              type: string
              example: 0xa645c3bdd0dfd0c3628803075b3b133e8426061dc915ef996cc5ed4cece6d4e5
            starknetAddress:
              type: string
              example: 0x056471aa79e3daebb62185cebee14fb0088b462b04ccf6e60ec9386044bec798

    UserProfileRequest:
      type: object
      properties:
        location:
          type: string
          description: User location as in Github profile
          example: Paris, France
        bio:
          type: string
          description: User bio as in Github profile
          example: Contributing to awesome open source projects.
        website:
          type: string
          description: User website as in Github profile
        technologies:
          $ref: '#/components/schemas/Technologies'
        cover:
          $ref: '#/components/schemas/UserProfileCoverColor'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactInformation'
        allocatedTimeToContribute:
          $ref: '#/components/schemas/AllocatedTime'
        isLookingForAJob:
          type: boolean
          description: Whether the user is looking for a job or not

    UserProfileCoverColor:
      type: string
      enum:
        - MAGENTA
        - CYAN
        - BLUE
        - YELLOW
      description: The cover color chosen by the user

    PrivateUserProfileResponse:
      allOf:
        - $ref: '#/components/schemas/PublicUserProfileResponse'
        - type: object
          properties:
            allocatedTimeToContribute:
              $ref: '#/components/schemas/AllocatedTime'
            isLookingForAJob:
              type: boolean
              description: Whether the user is looking for a job or not

    PublicUserProfileResponse:
      discriminator:
        propertyName: type
        mapping:
          privateUserProfileResponse: '#/components/schemas/PrivateUserProfileResponse'
      allOf:
        - $ref: '#/components/schemas/UserLinkResponse'
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/UserId'
            location:
              type: string
              description: User location as in Github profile
              example: Paris, France
            bio:
              type: string
              description: User bio as in Github profile
              example: Contributing to awesome open source projects.
            website:
              type: string
              description: User website as in Github profile
            technologies:
              $ref: '#/components/schemas/Technologies'
            createdAt:
              type: string
              format: date-time
              description: When the user signed up on OnlyDust
            lastSeenAt:
              type: string
              format: date-time
              description: The last time the user signed in on OnlyDust
            firstContributedAt:
              type: string
              format: date-time
              description: First contribution date to return if user not registered on OD
            cover:
              $ref: '#/components/schemas/UserProfileCoverColor'
            contacts:
              type: array
              items:
                $ref: '#/components/schemas/ContactInformation'
            projects:
              type: array
              items:
                $ref: '#/components/schemas/UserProfileProjects'
            stats:
              $ref: '#/components/schemas/UserProfileStats'

    UserProfileStats:
      type: object
      required:
        - contributedProjectCount
        - leadedProjectCount
        - totalsEarned
        - contributionCount
        - contributionCountPerWeeks
        - contributionCountVariationSinceLastWeek
      properties:
        contributedProjectCount:
          type: integer
          description: Number of projects on which the user contributed
          example: 2
        leadedProjectCount:
          type: integer
          description: Number of projects the user leads
          example: 1
        totalsEarned:
          $ref: '#/components/schemas/RewardTotalAmountsResponse'
        contributionCount:
          type: integer
          description: Total number of contributions made by the user within OnlyDust projects
          example: 104
        contributionCountPerWeeks:
          type: array
          items:
            $ref: '#/components/schemas/UserContributionStats'
        contributionCountVariationSinceLastWeek:
          type: integer

    UserContributionStats:
      type: object
      required:
        - year
        - week
        - codeReviewCount
        - issueCount
        - pullRequestCount
      properties:
        year:
          type: integer
          example: 2023
        week:
          type: integer
          example: 34
        codeReviewCount:
          type: integer
        issueCount:
          type: integer
        pullRequestCount:
          type: integer

    UserProfileProjects:
      type: object
      required:
        - id
        - name
        - isLead
        - logoUrl
        - contributorCount
        - totalGranted
        - userContributionCount
        - userLastContributedAt
        - slug
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        name:
          type: string
          example: Verkle Tries
        isLead:
          type: boolean
          example: false
        leadSince:
          type: string
          format: date-time
          description: Since when the user is leading the project
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
        contributorCount:
          type: integer
          description: Total number of contributors within the project
          example: 163
        totalGranted:
          type: number
          description: Total USD-equivalent amount of all rewards granted on this project
          example: 25400
        userContributionCount:
          type: integer
          description: Number of contributions made by the user on this project
          example: 34
        userLastContributedAt:
          type: string
          format: date-time
          description: The last time the user contributed to this project
        slug:
          type: string
          description: Slug derived from project name
        visibility:
          $ref: '#/components/schemas/ProjectVisibility'

    ContactInformation:
      type: object
      required:
        - channel
        - contact
        - visibility
      properties:
        channel:
          $ref: '#/components/schemas/ContactInformationChannel'
        contact:
          type: string
          example: foobar@gmail.com
        visibility:
          type: string
          enum:
            - public
            - private

    ContactInformationChannel:
      type: string
      enum:
        - EMAIL
        - TELEGRAM
        - TWITTER
        - DISCORD
        - LINKEDIN
        - WHATSAPP

    AllocatedTime:
      type: string
      enum:
        - NONE
        - LESS_THAN_ONE_DAY
        - ONE_TO_THREE_DAYS
        - GREATER_THAN_THREE_DAYS

    ContributorSearchResponse:
      type: object
      required:
        - contributors
      properties:
        internalContributors:
          type: array
          items:
            $ref: '#/components/schemas/ContributorSearchItemResponse'
        externalContributors:
          type: array
          items:
            $ref: '#/components/schemas/ContributorSearchItemResponse'

    ContributorSearchItemResponse:
      type: object
      required:
        - githubUserId
        - login
        - avatarUrl
        - isRegistered
      properties:
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'
        login:
          type: string
          description: User's Github login
          example: ofux
        avatarUrl:
          type: string
          format: url
          description: Direct URL to user's avatar image
          example: 'https://avatars.githubusercontent.com/u/595505?v=4'
        isRegistered:
          type: boolean
          description: True if the user is registered on OnlyDust

    ContributorsPageResponse:
      type: object
      required:
        - contributors
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - hasMore
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
        contributors:
          type: array
          items:
            $ref: '#/components/schemas/ContributorPageItemResponse'

    ContributorPageItemResponse:
      type: object
      required:
        - id
        - githubUserId
        - login
        - avatarUrl
        - contributionCount
        - rewardCount
        - earned
        - isRegistered
      properties:
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'
        login:
          type: string
          description: User's Github login
          example: ofux
        avatarUrl:
          type: string
          format: url
          description: Direct URL to user's avatar image
          example: 'https://avatars.githubusercontent.com/u/595505?v=4'
        contributionCount:
          type: integer
          description: Total number of contributions the contributor made on this project.
          example: 22
        rewardCount:
          type: integer
          description: Total number of rewards the contributor got on this project.
          example: 10
        earned:
          $ref: '#/components/schemas/RewardTotalAmountsResponse'
        contributionToRewardCount:
          type: integer
          description: Total number of contributions the contributor was not rewarded for on this project.
          example: 9
        pullRequestToReward:
          type: integer
          example: 2
        issueToReward:
          type: integer
          example: 4
        codeReviewToReward:
          type: integer
          example: 3
        isRegistered:
          type: boolean

    SponsorResponse:
      type: object
      required:
        - id
        - name
        - url
        - logoUrl
      properties:
        id:
          $ref: '#/components/schemas/SponsorId'
        name:
          type: string
          description: Sponsor name
          example: Ethereum Foundation
        url:
          type: string
          format: url
          description: URL of sponsor's website
          example: 'https://ethereum.org'
        logoUrl:
          type: string
          format: url
          description: Direct URL to sponsor's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png'

    ProjectPageResponse:
      type: object
      required:
        - hasMore
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
        - projects
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPageItemResponse'
        technologies:
          type: array
          items:
            type: string
        sponsors:
          type: array
          items:
            type: string
        hasMore:
          type: boolean
          example: true
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
    ProjectPageItemResponse:
      type: object
      required:
        - id
        - slug
        - name
        - shortDescription
        - logoUrl
        - hiring
        - visibility
        - repoCount
        - contributorCount
        - leaders
        - sponsors
        - technologies
        - isInvitedAsProjectLead
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        slug:
          $ref: '#/components/schemas/ProjectSlug'
        name:
          type: string
          example: Verkle Tries
        shortDescription:
          type: string
          example: A short project description
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
        hiring:
          type: boolean
          description: Is the project currently hiring?
        visibility:
          $ref: '#/components/schemas/ProjectVisibility'
        repoCount:
          type: integer
          description: Number of github repositories included in the project
          example: 2
        contributorCount:
          type: integer
          description: Total number of contributors within the project
          example: 163
        leaders:
          type: array
          items:
            $ref: '#/components/schemas/RegisteredUserLinkResponse'
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/SponsorResponse'
        technologies:
          $ref: '#/components/schemas/Technologies'
        isInvitedAsProjectLead:
          type: boolean
          default: false
        isMissingGithubAppInstallation:
          type: boolean

    ProjectResponse:
      type: object
      required:
        - id
        - slug
        - name
        - createdAt
        - shortDescription
        - longDescription
        - logoUrl
        - moreInfoUrl
        - hiring
        - visibility
        - contributorCount
        - topContributors
        - leaders
        - invitedLeaders
        - sponsors
        - technologies
        - remainingUsdBudget
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        slug:
          $ref: '#/components/schemas/ProjectSlug'
        name:
          type: string
          example: Verkle Tries
        createdAt:
          type: string
          format: date-time
          description: When the project was created
        shortDescription:
          type: string
          example: A short project description
        longDescription:
          type: string
          example: A lonnnnnnnnnnnnng project description
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
        moreInfoUrl:
          type: string
          format: url
          description: External link to get more information about the project
          example: 'https://t.me/my-super-project'
        hiring:
          type: boolean
          description: Is the project currently hiring?
        visibility:
          $ref: '#/components/schemas/ProjectVisibility'
        contributorCount:
          type: integer
          description: Total number of contributors within the project
          example: 163
        topContributors:
          type: array
          description: The top 3 contributors (by contribution count) of this project
          maxItems: 3
          items:
            $ref: '#/components/schemas/UserLinkResponse'
        # For now, we let the flatten repos list here to avoid breaking changes. However, it is marked as deprecated.
        # The 'organizations' field should be used instead.
        repos:
          deprecated: true
          type: array
          items:
            $ref: '#/components/schemas/GithubRepoResponse'
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/ProjectGithubOrganizationResponse'
        leaders:
          type: array
          items:
            $ref: '#/components/schemas/RegisteredUserLinkResponse'
        invitedLeaders:
          type: array
          items:
            $ref: '#/components/schemas/RegisteredUserLinkResponse'
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/SponsorResponse'
        technologies:
          $ref: '#/components/schemas/Technologies'
        remainingUsdBudget:
          type: number
          example: 20.0
        rewardSettings:
          $ref: '#/components/schemas/ProjectRewardSettings'

    ShortProjectResponse:
      type: object
      required:
        - id
        - slug
        - name
        - shortDescription
        - logoUrl
        - visibility
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        slug:
          $ref: '#/components/schemas/ProjectSlug'
        name:
          type: string
          example: Verkle Tries
        shortDescription:
          type: string
          example: A short project description
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
        visibility:
          $ref: '#/components/schemas/ProjectVisibility'

    ProjectVisibility:
      type: string
      enum:
        - PUBLIC
        - PRIVATE
      description: Is the project visible to anyone?

    ProjectGithubOrganizationResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GithubUserId'
        login:
          type: string
          description: Organization's Github login
          example: onlydustxyz
        avatarUrl:
          type: string
          format: url
          description: Direct URL to organization's avatar image
          example: 'https://avatars.githubusercontent.com/u/98735558?v=4'
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the organization
          example: 'https://github.com/onlydustxyz'
        name:
          type: string
          example: OnlyDust
        installationId:
          $ref: '#/components/schemas/GithubInstallationId'
        repos:
          type: array
          items:
            $ref: '#/components/schemas/ProjectGithubOrganizationRepoResponse'

    ProjectGithubOrganizationRepoResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/GithubRepoResponse'
        - type: object
          properties:
            isIncludedInProject:
              type: boolean
              description: Is the repo included in the project?

    GithubOrganizationResponse:
      type: object
      required:
        - id
        - login
        - avatarUrl
        - htmlUrl
        - name
        - repos
        - installed
      properties:
        id:
          $ref: '#/components/schemas/GithubUserId'
        login:
          type: string
          description: Organization's Github login
          example: onlydustxyz
        avatarUrl:
          type: string
          format: url
          description: Direct URL to organization's avatar image
          example: 'https://avatars.githubusercontent.com/u/98735558?v=4'
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the organization
          example: 'https://github.com/onlydustxyz'
        name:
          type: string
          example: OnlyDust
        repos:
          type: array
          description: Github repos linked to installed organization
          items:
            $ref: '#/components/schemas/ShortGithubRepoResponse'
        installed:
          type: boolean
          description: False if this organization is not installed

    ShortGithubRepoResponse:
      discriminator:
        propertyName: type
        mapping:
          projectGithubOrganizationRepoResponse: '#/components/schemas/ProjectGithubOrganizationRepoResponse'
      type: object
      required:
        - id
        - owner
        - name
        - htmlUrl
      properties:
        id:
          $ref: '#/components/schemas/GithubRepoId'
        owner:
          type: string
          description: Repo owner on Github
          example: onlydustxyz
        name:
          type: string
          description: Repo name on Github
          example: marketplace-backend
        description:
          type: string
          description: Repo description on Github
          example: Awesome repo
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the repo
          example: https://github.com/onlydustxyz/marketplace-backend

    GithubRepoResponse:
      allOf:
        - $ref: '#/components/schemas/ShortGithubRepoResponse'
        - type: object
          required:
            - stars
            - forkCount
            - hasIssues
          properties:
            stars:
              type: integer
              description: Number of stars on Github
              example: 625
            forkCount:
              type: integer
              description: Fork count on Github
              example: 3
            hasIssues:
              type: boolean
              description: Are issues enabled on Github for this repo

    Technologies:
      type: object
      description: List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
      additionalProperties:
        type: integer
        format: int64
      example:
        Rust: 91283
        Go: 12388
        Java: 1233

    CreateRewardResponse:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/RewardId'

    RewardsPageResponse:
      type: object
      required:
        - rewards
        - hasMore
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/RewardPageItemResponse'
        hasMore:
          type: boolean
          example: true
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
    MyRewardsPageResponse:
      type: object
      required:
        - rewards
        - hasMore
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/MyRewardPageItemResponse'
        hasMore:
          type: boolean
          example: true
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
    MyRewardsListResponse:
      type: object
      required:
        - rewards
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/MyRewardPageItemResponse'
    RewardPageItemResponse:
      type: object
      required:
        - status
        - numberOfRewardedContributions
        - rewardedUserLogin
        - rewardedUserAvatar
        - amount
        - requestedAt
        - id
      properties:
        requestedAt:
          type: string
          format: date-time
          example: 2023-07-21T12:45:04.750174
        status:
          $ref: '#/components/schemas/RewardStatus'
        amount:
          $ref: '#/components/schemas/RewardAmountResponse'
        numberOfRewardedContributions:
          type: integer
          example: 11
        rewardedUserLogin:
          type: string
          example: PierreOucif
        rewardedUserAvatar:
          type: string
          example: https://avatars.githubusercontent.com/u/16590657?v=4
        id:
          $ref: '#/components/schemas/RewardId'
    MyRewardPageItemResponse:
      type: object
      required:
        - requestedAt
        - status
        - numberOfRewardedContributions
        - amount
        - rewardedOnProjectName
        - rewardedOnProjectLogoUrl
        - id
        - projectId
      properties:
        requestedAt:
          type: string
          format: date-time
          example: 2023-07-21T12:45:04.750174
        projectId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/RewardStatus'
        amount:
          $ref: '#/components/schemas/RewardAmountResponse'
        numberOfRewardedContributions:
          type: integer
          example: 11
        rewardedOnProjectName:
          type: string
          example: Bretzel
        rewardedOnProjectLogoUrl:
          type: string
          example: https://onlydust.xyz/cdn-cgi/image/width=100/https://onlydust-app-images.s3.eu-west-1.amazonaws.com/5003677688814069549.png
        id:
          $ref: '#/components/schemas/RewardId'
    RewardType:
      type: string
      enum:
        - ISSUE
        - PULL_REQUEST
        - CODE_REVIEW
    RewardStatus:
      enum:
        - PENDING_INVOICE
        - PENDING_SIGNUP
        - MISSING_PAYOUT_INFO
        - PROCESSING
        - COMPLETE
    RewardAmountResponse:
      type: object
      required:
        - total
        - currency
      properties:
        total:
          type: number
        currency:
          $ref: '#/components/schemas/CurrencyContract'
        dollarsEquivalent:
          type: number
    RewardRequest:
      type: object
      required:
        - amount
        - recipientId
        - currency
        - items
      properties:
        recipientId:
          type: integer
          format: int64
          description: Github user id to reward
        amount:
          type: number
          description: Currency amount
        currency:
          $ref: '#/components/schemas/CurrencyContract'
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/RewardItemRequest'

    RewardItemRequest:
      type: object
      required:
        - type
        - id
        - number
        - repoId
      properties:
        type:
          $ref: '#/components/schemas/RewardType'
        id:
          type: string
        number:
          type: integer
          format: int64
        repoId:
          type: integer
          format: int64


    GithubPullRequest:
      type: object
      required:
        - id
        - number
        - title
        - status
        - createdAt
        - htmlUrl
        - author
        - repository
        - commentCount
        - closingIssues
      properties:
        id:
          $ref: '#/components/schemas/PullRequestId'
        number:
          type: integer
          format: int64
          description: Issue number
          example: 6
        title:
          type: string
          description: Issue or pull request title on Github
        status:
          $ref: '#/components/schemas/GithubPullRequestStatus'
        createdAt:
          type: string
          format: date-time
          description: When the issue was created.
        mergedAt:
          type: string
          format: date-time
          description: When the pull request was merged.
        closedAt:
          type: string
          format: date-time
          description: When the issue was cancelled or closed.
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the issue.
        body:
          type: string
          description: The body of the pull request.
        author:
          $ref: '#/components/schemas/UserLinkResponse'
        repository:
          $ref: '#/components/schemas/ShortGithubRepoResponse'
        commentCount:
          type: integer
        closingIssues:
          type: array
          description: The list of issues resolved by this pull request.
          items:
            $ref: '#/components/schemas/GithubIssue'

    GithubIssue:
      type: object
      description: Github issue
      required:
        - id
        - number
        - title
        - status
        - createdAt
        - htmlUrl
        - author
        - repository
        - commentCount
        - closedPullRequests
      properties:
        id:
          $ref: '#/components/schemas/IssueId'
        number:
          type: integer
          format: int64
          description: Issue number
          example: 6
        title:
          type: string
          description: Issue or pull request title on Github
        status:
          $ref: '#/components/schemas/GithubIssueStatus'
        createdAt:
          type: string
          format: date-time
          description: When the issue was created.
        closedAt:
          type: string
          format: date-time
          description: When the issue was cancelled or closed.
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the issue.
        body:
          type: string
          description: The body of the issue.
        author:
          $ref: '#/components/schemas/UserLinkResponse'
        repository:
          $ref: '#/components/schemas/ShortGithubRepoResponse'
        commentCount:
          type: integer
        closingPullRequests:
          type: array
          description: The list of pull requests resolving this issue.
          items:
            $ref: '#/components/schemas/GithubPullRequest'

    GithubCodeReview:
      type: object
      required:
        - id
        - pullRequest
        - state
        - author
        - requestedAt
      properties:
        id:
          $ref: '#/components/schemas/CodeReviewId'
        pullRequest:
          $ref: '#/components/schemas/GithubPullRequest'
        state:
          $ref: '#/components/schemas/GithubCodeReviewState'
        requestedAt:
          type: string
          format: date-time
          description: When the code review was requested.
        submittedAt:
          type: string
          format: date-time
          description: When the code review was submitted.
        author:
          $ref: '#/components/schemas/UserLinkResponse'

    ContributionType:
      type: string
      enum:
        - ISSUE
        - PULL_REQUEST
        - CODE_REVIEW

    ContributionSort:
      type: string
      default: CREATED_AT
      enum:
        - CREATED_AT
        - PROJECT_REPO_NAME
        - GITHUB_NUMBER_TITLE

    GithubIssueStatus:
      type: string
      enum:
        - OPEN
        - COMPLETED
        - CANCELLED

    GithubPullRequestStatus:
      type: string
      enum:
        - OPEN
        - CLOSED
        - MERGED

    GithubCodeReviewState:
      type: string
      enum:
        - PENDING
        - COMMENTED
        - APPROVED
        - CHANGES_REQUESTED
        - DISMISSED

    ContributionStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED

    GithubStatus:
      type: string
      enum:
        - OPEN
        - COMPLETED
        - CANCELLED
        - CLOSED
        - MERGED
        - DRAFT
        - PENDING
        - COMMENTED
        - APPROVED
        - CHANGES_REQUESTED
        - DISMISSED

    CurrencyContract:
      type: string
      description: Currency
      enum:
        - USD
        - ETH
        - APT
        - STARK
        - OP

    ContributionPageResponse:
      type: object
      required:
        - contributions
        - hasMore
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
      properties:
        contributions:
          type: array
          items:
            $ref: '#/components/schemas/ContributionPageItemResponse'
        hasMore:
          type: boolean
          example: true
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer

    ContributedProjectsResponse:
      type: object
      required:
        - projects
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ShortProjectResponse'

    ContributedReposResponse:
      type: object
      required:
        - repos
      properties:
        repos:
          type: array
          items:
            $ref: '#/components/schemas/ShortGithubRepoResponse'

    ContributionPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/ContributionResponse'
        - type: object
          required:
            - id
            - createdAt
            - status
            - project
            - links
            - rewardIds
          properties:
            id:
              type: string
              description: The contribution ID is determined from its content's ID (ie PR / issue / code review ID)
            createdAt:
              type: string
              format: date-time
              description: When the contribution was created
            completedAt:
              type: string
              format: date-time
              description: When the contribution was completed
            status:
              $ref: '#/components/schemas/ContributionStatus'
            project:
              $ref: '#/components/schemas/ShortProjectResponse'
            links:
              type: array
              description: Related contributions
              items:
                $ref: '#/components/schemas/ContributionLinkResponse'
            rewardIds:
              type: array
              description: Rewards granted for this contribution
              items:
                $ref: '#/components/schemas/RewardId'


    ContributionLinkResponse:
      allOf:
        - $ref: '#/components/schemas/ContributionResponse'
        - type: object
          required:
            - is_mine
          properties:
            is_mine:
              type: boolean
              description: True if the contribution is made by the same user

    ContributionResponse:
      type: object
      required:
        - type
        - repo
        - githubNumber
        - githubStatus
        - githubAuthor
        - githubTitle
        - githubHtmlUrl
      properties:
        type:
          $ref: '#/components/schemas/ContributionType'
        repo:
          $ref: '#/components/schemas/ShortGithubRepoResponse'
        githubAuthor:
          $ref: '#/components/schemas/UserLinkResponse'
        githubNumber:
          type: integer
          format: int64
          description: Github item number
          example: 6
        githubStatus:
          $ref: '#/components/schemas/GithubStatus'
        githubTitle:
          type: string
          description: Github item title
        githubHtmlUrl:
          type: string
          format: url
          description: The public Github URL of the contribution.
        githubBody:
          type: string
          description: The body of the contribution.
        githubCodeReviewOutcome:
          $ref: '#/components/schemas/GithubCodeReviewState'


    ContributionDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/ContributionResponse'
        - type: object
          required:
            - id
            - createdAt
            - status
            - project
            - repo
            - commentsCount
            - links
            - rewards
          properties:
            id:
              type: string
              description: The contribution ID is determined from its content's ID (ie PR / issue / code review ID)
            createdAt:
              type: string
              format: date-time
              description: When the contribution was created
            completedAt:
              type: string
              format: date-time
              description: When the contribution was completed
            status:
              $ref: '#/components/schemas/ContributionStatus'
            project:
              $ref: '#/components/schemas/ShortProjectResponse'
            repo:
              $ref: '#/components/schemas/ShortGithubRepoResponse'
            commentsCount:
              type: integer
              description: Number of comments on the contribution
            links:
              type: array
              description: Related contributions
              items:
                $ref: '#/components/schemas/ContributionLinkResponse'
            rewards:
              type: array
              description: Rewards granted for this contribution
              items:
                $ref: '#/components/schemas/RewardResponse'

    GetMeResponse:
      type: object
      required:
        - id
        - githubUserId
        - login
        - avatarUrl
        - hasSeenOnboardingWizard
        - hasAcceptedLatestTermsAndConditions
      properties:
        id:
          type: string
          pattern: uuid
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'
        login:
          type: string
        avatarUrl:
          type: string
          pattern: uri
        hasSeenOnboardingWizard:
          type: boolean
          description: True if the user has seen the onboarding process
        hasAcceptedLatestTermsAndConditions:
          type: boolean
          description: True if the user has accepted the latest version of terms and conditions
        hasValidPayoutInfos:
          type: boolean
          description: False if the user has invalid payout information
        projectsLed:
          type: array
          items:
            $ref: '#/components/schemas/ProjectLedShortResponse'
        pendingProjectsLed:
          type: array
          items:
            $ref: '#/components/schemas/ProjectLedShortResponse'
    ProjectLedShortResponse:
      type: object
      required:
        - id
        - slug
        - name
        - contributorCount
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
        name:
          type: string
        logoUrl:
          type: string
        contributorCount:
          type: integer
          format: int64
    PatchMeContract:
      type: object
      properties:
        hasSeenOnboardingWizard:
          type: boolean
          description: True if the the onboarding process was displayed to the user
        hasAcceptedTermsAndConditions:
          type: boolean
          description: True if the user has accepted the latest version of terms and conditions

    ApplicationRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          $ref: '#/components/schemas/ProjectId'

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
        shortDescription:
          type: string
        longDescription:
          type: string
        moreInfo:
          type: array
          items:
            $ref: '#/components/schemas/MoreInfo'
        isLookingForContributors:
          type: boolean
        inviteGithubUserIdsAsProjectLeads:
          type: array
          items:
            $ref: '#/components/schemas/GithubUserId'
        githubRepoIds:
          type: array
          items:
            $ref: '#/components/schemas/GithubRepoId'
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image

    UpdateProjectIgnoredContributionsRequest:
      type: object
      properties:
        contributionsToIgnore:
          type: array
          items:
            $ref: '#/components/schemas/ContributionId'
        contributionsToUnignore:
          type: array
          items:
            $ref: '#/components/schemas/ContributionId'

    UpdateProjectRequest:
      type: object
      required:
        - name
        - shortDescription
        - longDescription
        - moreInfo
        - isLookingForContributors
      properties:
        name:
          type: string
        shortDescription:
          type: string
        longDescription:
          type: string
        moreInfo:
          type: array
          items:
            $ref: '#/components/schemas/MoreInfo'
        isLookingForContributors:
          type: boolean
        inviteGithubUserIdsAsProjectLeads:
          type: array
          description: List of Github user ids to invite as project leads.
            All other project lead invitations will be removed.
            If empty, all project lead invitations will be removed.
            If null, no change will be made.
            It is allowed to add a new project lead invitation directly through this list.
          items:
            $ref: '#/components/schemas/GithubUserId'
        projectLeadsToKeep:
          type: array
          description: List of project leads to keep.
            All other project leads will be removed.
            If empty, all project leads will be removed.
            If null, no change will be made.
            It is not allowed to add a new project lead directly through this list, as they must be invited first.
          items:
            $ref: '#/components/schemas/UserId'
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
        rewardSettings:
          $ref: '#/components/schemas/ProjectRewardSettings'
        githubRepoIds:
          type: array
          description: List of Github repos to include in the project.
            All other repos will be unlinked from the project.
            If empty, all repos will be unlinked from the project.
            If null, no change will be made.
            It is allowed to link a new repo directly through this list.
          items:
            $ref: '#/components/schemas/GithubRepoId'

    ProjectRewardSettings:
      type: object
      properties:
        ignorePullRequests:
          type: boolean
          description: Ignore pull requests by default
        ignoreIssues:
          type: boolean
          description: Ignore issues by default
        ignoreCodeReviews:
          type: boolean
          description: Ignore code reviews by default
        ignoreContributionsBefore:
          type: string
          format: date-time
          description: Ignore contributions before this date by default

    CreateProjectResponse:
      type: object
      required:
        - projectId
        - projectSlug
      properties:
        projectId:
          type: string
          format: uuid
        projectSlug:
          type: string
    UpdateProjectResponse:
      type: object
      required:
        - projectId
        - projectSlug
      properties:
        projectId:
          type: string
          format: uuid
        projectSlug:
          type: string
    MoreInfo:
      type: object
      properties:
        url:
          type: string
        value:
          type: string
    GithubUserListResponse:
      type: array
      items:
        $ref: '#/components/schemas/GithubUserResponse'
    GithubUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        avatarUrl:
          type: string
          format: url
        isRegistered:
          type: boolean

    InstallationResponse:
      type: object
      required:
        - id
        - organization
      properties:
        id:
          $ref: '#/components/schemas/GithubInstallationId'
        organization:
          $ref: '#/components/schemas/GithubOrganizationResponse'

    UploadImageResponse:
      type: object
      properties:
        url:
          type: string
          format: url
          description: The direct URL to the uploaded image
      example:
        url: https://onlydust-app-images.s3.eu-west-1.amazonaws.com/4137005338789730434.png

    ProjectBudgetsResponse:
      type: object
      required:
        - budgets
      properties:
        initialDollarsEquivalent:
          type: number
        remainingDollarsEquivalent:
          type: number
        budgets:
          type: array
          items:
            $ref: '#/components/schemas/BudgetResponse'

    BudgetResponse:
      type: object
      required:
        - currency
        - initialAmount
        - remaining
      properties:
        currency:
          $ref: '#/components/schemas/CurrencyContract'
        initialAmount:
          type: number
        remaining:
          type: number
        remainingDollarsEquivalent:
          type: number
        initialDollarsEquivalent:
          type: number
        dollarsConversionRate:
          type: number

    RewardTotalAmountsResponse:
      type: object
      properties:
        totalAmount:
          type: number
        details:
          type: array
          items:
            $ref: '#/components/schemas/MyRewardAmountResponse'

    MyRewardAmountResponse:
      type: object
      required:
        - totalAmount
        - currency
      properties:
        totalAmount:
          type: number
        totalDollarsEquivalent:
          type: number
        currency:
          $ref: '#/components/schemas/CurrencyContract'

    RewardResponse:
      type: object
      required:
        - status
        - amount
        - currency
        - from
        - to
        - createdAt
        - id
      properties:
        id:
          type: string
          format: uuid
        currency:
          $ref: '#/components/schemas/CurrencyContract'
        amount:
          type: number
        dollarsEquivalent:
          type: number
        status:
          $ref: '#/components/schemas/RewardStatus'
        from:
          $ref: '#/components/schemas/GithubUserResponse'
        to:
          $ref: '#/components/schemas/GithubUserResponse'
        createdAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time

    RewardDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/RewardResponse'
        - type: object
          properties:
            receipt:
              $ref: '#/components/schemas/ReceiptResponse'

    RewardItemsPageResponse:
      type: object
      required:
        - rewardItems
        - hasMore
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
      properties:
        rewardItems:
          type: array
          items:
            $ref: '#/components/schemas/RewardItemResponse'
        hasMore:
          type: boolean
          example: true
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
    RewardItemResponse:
      type: object
      required:
        - title
        - githubUrl
        - createdAt
        - repoName
        - type
        - status
        - number
        - id
      properties:
        number:
          type: integer
          format: int64
        id:
          type: string
        title:
          type: string
        githubUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        lastUpdateAt:
          type: string
          format: date-time
        repoName:
          type: string
        type:
          $ref: '#/components/schemas/ContributionType'
        commitsCount:
          type: integer
        userCommitsCount:
          type: integer
        commentsCount:
          type: integer
        codeReviewOutcome:
          type: string
          enum:
            - APPROVED
            - CHANGE_REQUESTED
        status:
          $ref: '#/components/schemas/GithubStatus'
        githubAuthorId:
          type: integer
          format: int64
        authorLogin:
          type: string
        authorAvatarUrl:
          type: string
        authorGithubUrl:
          type: string

    RewardableItemsPageResponse:
      type: object
      required:
        - rewardItems
        - hasMore
        - totalPageNumber
        - totalItemNumber
        - nextPageIndex
      properties:
        rewardableItems:
          type: array
          items:
            $ref: '#/components/schemas/RewardableItemResponse'
        hasMore:
          type: boolean
          example: true
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        nextPageIndex:
          description: if there is no next page, it will be equals to the last page
          type: integer
    RewardableItemResponse:
      type: object
      required:
        - title
        - githubUrl
        - createdAt
        - repoName
        - type
        - status
        - number
        - id
      properties:
        number:
          type: integer
          format: int64
          description: Either the issue number, the pull request number or the code review's pull request number
        id:
          type: string
          description: Either the issue id, the pull request id or the code review id
        contributionId:
          type: string
          description: Id of the contribution (if any) related to this rewardable item.
        title:
          type: string
        githubUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        lastUpdateAt:
          type: string
          format: date-time
        repoName:
          type: string
        type:
          $ref: '#/components/schemas/ContributionType'
        commitsCount:
          type: integer
        userCommitsCount:
          type: integer
        commentsCount:
          type: integer
        codeReviewOutcome:
          type: string
          enum:
            - APPROVED
            - CHANGE_REQUESTED
        status:
          $ref: '#/components/schemas/GithubStatus'

    ReceiptType:
      type: string
      enum:
        - CRYPTO
        - FIAT

    ReceiptResponse:
      type: object
      required:
        - type
        - transactionReference
      properties:
        type:
          $ref: '#/components/schemas/ReceiptType'
        iban:
          type: string
        walletAddress:
          type: string
        ens:
          type: string
        transactionReference:
          type: string

    OnContributionsChangeEvent:
      type: object
      required:
        - repoIds
      properties:
        repoIds:
          type: array
          description: List of Github repos on which contributions have changed
          items:
            $ref: '#/components/schemas/GithubRepoId'

    AddOtherWorkRequest:
      type: object
      required:
        - githubRepoId
        - title
        - description
      properties:
        githubRepoId:
          $ref: '#/components/schemas/GithubRepoId'
        title:
          type: string
        description:
          type: string

    AddOtherIssueRequest:
      type: object
      required:
        - githubIssueHtmlUrl
      properties:
        githubIssueHtmlUrl:
          type: string
          format: url

    AddOtherPullRequestRequest:
      type: object
      required:
        - githubIssueHtmlUrl
      properties:
        githubPullRequestHtmlUrl:
          type: string
          format: url
