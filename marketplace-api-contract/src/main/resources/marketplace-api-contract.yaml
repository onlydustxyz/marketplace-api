openapi: 3.0.3
info:
  title: OnlyDust Marketplace API
  description: OnlyDust Marketplace API
  version: 1.0.0
servers:
  - url: 'http://localhost:9999'
    description: Local
  - url: 'https://develop-api.onlydust.com'
    description: Develop
  - url: 'https://staging-api.onlydust.com'
    description: Staging
  - url: 'https://api.onlydust.com'
    description: Production

paths:
  /api/v1/version:
    get:
      tags:
        - Version
      summary: Get API version information
      operationId: getAPIVersion
      responses:
        "200":
          description: 'API Version'
          content:
            application/json:
              schema:
                type: object
                properties:
                  releaseDate:
                    type: string
                    format: date-time
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/banner:
    get:
      tags:
        - ReadBanner
      summary: Get currently visible banner
      operationId: getBanner
      responses:
        "200":
          description: 'Banner'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadMe
      summary: Get caller info
      operationId: getMe
      description: |
        Get the caller info
      responses:
        "200":
          description: 'Minimalist user info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMeResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    patch:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Patch some caller info
      operationId: patchMe
      description: |
        Patch onboarding info of the caller
      requestBody:
        description: 'Patched user info'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMeContract'
      responses:
        "204":
          description: 'The user was patched successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/banners/{bannerId}:
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Close a banner
      operationId: closeBanner
      description: |
        Close a banner for the caller. Will mark the banner as closed for the caller.
        The banner won't be displayed anymore.
      parameters:
        - in: path
          name: bannerId
          required: true
          schema:
            $ref: '#/components/schemas/BannerId'
      responses:
        "204":
          description: 'Banner closed'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/logout:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Logout
      operationId: logoutMe
      description: |
        Evict data from caches and invalidate the tokens
      responses:
        "204":
          description: 'Logout successful'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/profile:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get caller profile
      operationId: getMyProfile
      description: |
        Get the whole user profile
      responses:
        "200":
          description: 'Profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserProfileResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Me
      summary: Update caller profile
      operationId: setMyProfile
      description: |
        Set the whole user profile (including private data)
      requestBody:
        description: 'User profile'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileRequest'
      responses:
        "200":
          description: 'User profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserProfileResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/profile/avatar:
    post:
      security:
        - { }
      tags:
        - Me
      summary: Upload a profile avatar
      operationId: uploadAvatar
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: 'Image uploaded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/profile/github:
    get:
      security:
        - { }
      tags:
        - Me
      summary: Update user's github profile data
      operationId: updateMyGithubProfileData
      responses:
        "204":
          description: 'Github login, avatar and email updated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/project-leader-invitations/{projectId}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Accept invitation to lead a project
      operationId: acceptInvitationToLeadProject
      description: |
        Accept invitation to lead a project
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      responses:
        "204":
          description: 'The invitation was accepted successfully. The caller is now a leader of the project.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/me/project-claims/{projectId}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Claim project
      operationId: claimProject
      description: |
        Claim project
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      responses:
        "204":
          description: 'This project was successfully claimed. The caller is now a leader of the project.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/rewards:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadMe
      summary: Get caller's rewards
      operationId: getMyRewards
      description: |
        Get the page of all rewards where the recipient is the caller
      parameters:
        - in: query
          name: sort
          description: Sort order
          schema:
            $ref: "#/components/schemas/RewardsSort"
        - in: query
          name: direction
          schema:
            $ref: '#/components/schemas/SortDirection'
        - in: query
          name: currencies
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyId'
        - in: query
          name: projects
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectId'
        - in: query
          name: fromDate
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toDate
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/RewardStatusContract'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'Page of rewards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyRewardsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/contributed-projects:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get the list of projects the caller's contributed to
      operationId: getMyContributedProjects
      description: |
        Get the list of projects the caller's contributed to
      parameters:
        - in: query
          name: repositories
          description: Repository filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubRepoId'

      responses:
        "200":
          description: 'Project list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/contributed-repos:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get the list of github repos the caller's contributed to
      operationId: getMyContributedRepos
      description: |
        Get the list of github repos the caller's contributed to
      parameters:
        - in: query
          name: projects
          description: Project filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectId'

      responses:
        "200":
          description: 'Github repos list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributedReposResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/rewarding-projects:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get the list of projects the caller's been rewarded for
      operationId: getMyRewardingProjects
      description: |
        Get the list of projects the caller's been rewarded for

      responses:
        "200":
          description: 'Project list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/applications:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Apply to become a project contributor
      operationId: applyOnProject
      description: |
        Apply on a project. This endpoint will comment on the given GitHub issue on behalf of the user and register its application internally.
      requestBody:
        description: 'Application'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectApplicationCreateRequest'
      responses:
        "200":
          description: 'The application was sent successfully.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApplicationCreateResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/applications/{applicationId}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Update project application
      operationId: updateProjectApplication
      description: |
        Update application. Only the applicant can update its application.
      parameters:
        - in: path
          name: applicationId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectApplicationId'
      requestBody:
        description: 'Application'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectApplicationUpdateRequest'
      responses:
        "204":
          description: 'The application was updated successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/rewards/{rewardId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get my reward by reward Id
      operationId: getMyReward
      description: |
        Get my reward details. Only authenticated user can access this information.
      parameters:
        - in: path
          name: rewardId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: 'Reward details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardDetailsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/RewardForbiddenError'
        "404":
          $ref: '#/components/responses/RewardNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/me/rewards/{rewardId}/reward-items:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get my reward items page by reward Id
      operationId: getMyRewardItemsPage
      description: |
        Get my reward items details. Only authenticated user can access this information.
      parameters:
        - in: path
          name: rewardId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: pageIndex
          description: Page number
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          schema:
            type: integer
      responses:
        "200":
          description: 'Reward details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardItemsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/RewardForbiddenError'
        "404":
          $ref: '#/components/responses/RewardNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/reward-currencies:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get the list of currencies the caller received rewards in
      operationId: getMyRewardCurrencies
      description: |
        Get the list of currencies the caller received rewards in
      responses:
        "200":
          description: 'Currency list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyListResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/organizations:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Search Github user's organizations
      operationId: searchGithubUserOrganizations
      description: |
        Search Github user's organizations for github user id
      responses:
        "200":
          description: "Github user's organization list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GithubOrganizationResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/billing-profiles/{billingProfileId}/invitations:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Accept or reject coworker invitation
      operationId: acceptOrRejectCoworkerInvitation
      description: |
        Accept or reject coworker invitation. Caller must be the invited coworker.
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileCoworkerInvitationUpdateRequest'
      responses:
        "204":
          description: 'Invitation accepted/rejected'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/billing-profiles:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadMe
      summary: Get my billing profiles
      operationId: getMyBillingProfiles
      description: |
        Get my billing profiles
      responses:
        "200":
          description: 'User billing profiles'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyBillingProfilesResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/payout-preferences:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Get my payout preferences
      operationId: getMyPayoutPreferences
      description: |
        Get my payout preferences
      responses:
        "200":
          description: 'User payout preferences'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutPreferencesPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Set my payout preference for a project
      operationId: setMyPayoutPreferenceForProject
      description: |
        Set my payout preference for a project
      requestBody:
        description: 'Payout preference'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutPreferenceRequest'
      responses:
        "204":
          description: 'Payout preference was set successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/hackathons/{hackathonId}/registrations:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Register to an hackathon as a participant
      operationId: registerToHackathon
      description: |
        Register to an hackathon as a participant
      parameters:
        - in: path
          name: hackathonId
          required: true
          schema:
            $ref: '#/components/schemas/HackathonId'
      responses:
        "204":
          description: 'Successfully register.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/committees/{committeeId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadCommittees
      summary: Get my committee assignments
      operationId: getCommitteeAssignments
      description: |
        Get my committee assignments
      parameters:
        - in: path
          name: committeeId
          required: true
          schema:
            $ref: '#/components/schemas/CommitteeId'
      responses:
        "200":
          description: 'Get my committee assignments.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyCommitteeAssignmentsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/committees/{committeeId}/projects/{projectId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadCommittees
      summary: Get my committee assignment on project
      operationId: getCommitteeAssignmentOnProject
      description: |
        Get my committee assignment on project
      parameters:
        - in: path
          name: committeeId
          required: true
          schema:
            $ref: '#/components/schemas/CommitteeId'
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      responses:
        "200":
          description: 'Get my committee assignments.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyCommitteeAssignmentResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Me
      summary: Vote for committee assignment
      operationId: voteForCommitteeAssignment
      description: |
        Vote for committee assignment
      parameters:
        - in: path
          name: committeeId
          required: true
          schema:
            $ref: '#/components/schemas/CommitteeId'
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteForCommitteeAssignmentRequest'
      responses:
        "204":
          description: 'Vote for committee assignment.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/recommended-projects:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadMe
      summary: Get some recommended projects for the caller
      operationId: getRecommendedProjects
      description: |
        Get a paginated list of recommended projects for the caller
      parameters:
        - in: query
          name: pageIndex
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: 'Page of recommended projects'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendedProjectsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/me/journey:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadMe
      summary: Get the caller's journey completion
      operationId: getJourneyCompletion
      description: |
        Get the caller's journey completion
      responses:
        "200":
          description: 'Journey completion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JourneyCompletionResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/technologies:
    get:
      tags:
        - Technologies
      summary: Technologies used in OnlyDust projects
      operationId: getTechnologies
      description: |
        Get the list of all technologies (languages, frameworks, tools, etc.) used by at least one OnlyDust project
      responses:
        "200":
          description: 'Technologies'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllTechnologiesResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/search:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Users
      summary: Search contributors by login
      operationId: searchContributors
      description: |
        Get the list of all contributors of the project's repos or provided repos who match the login input query.
        If not enough results are found, the search is extended to the 5 best matching github users (by login).
      parameters:
        - in: query
          name: projectId
          description: |
            Allows to trigger internal contributors search within the project's repos.
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: repoIds
          description: |
            Allows to trigger internal contributors search within the provided repos.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubRepoId'
        - in: query
          name: login
          description: login query
          schema:
            type: string
        - in: query
          name: maxInternalContributorCountToTriggerExternalSearch
          description: |
            If the number of internal contributors is greater than this value, the external search is not triggered.
            Default value is 5.
          schema:
            type: integer
        - in: query
          name: maxInternalContributorCountToReturn
          description: |
            Max number of internal contributors that can be returned.
            Default value is 50.
          schema:
            type: integer
        - in: query
          name: externalSearchOnly
          description: |
            If true, only external search is performed.
            Default value is false.
          schema:
            type: boolean
      responses:
        "200":
          description: 'List of contributors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorSearchResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/{githubId}:
    get:
      tags:
        - ReadUsers
      summary: Get user profile
      operationId: getUserProfile
      description: |
        Get the publicly available user profile
      parameters:
        - in: path
          name: githubId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 'User profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfileResponseV2'
        "404":
          $ref: '#/components/responses/UserNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/login/{slug}:
    get:
      tags:
        - ReadUsers
      summary: Get user profile
      operationId: getUserProfileByLogin
      description: |
        Get the publicly available user profile
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 'User profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfileResponseV2'
        "404":
          $ref: '#/components/responses/UserNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v2/users/{githubId}/contributions:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Users
      summary: Get user's contributions
      operationId: getUserContributions
      description: |
        Get contributions of the user.
      parameters:
        - in: path
          name: githubId
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: types
          description: Contribution type filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ContributionType'
        - in: query
          name: statuses
          description: Contribution status filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ContributionStatus'
        - in: query
          name: projects
          description: Project filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectId'
        - in: query
          name: repositories
          description: Repository filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubRepoId'
        - in: query
          name: languages
          description: Language filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LanguageId'
        - in: query
          name: ecosystems
          description: Ecosystem filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EcosystemId'
        - in: query
          name: includePrivateProjects
          description: Include contributions in private projects
          schema:
            type: boolean
        - in: query
          name: fromDate
          description: Contribution date filter
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toDate
          description: Contribution date filter
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: sort
          description: Sorting field
          schema:
            $ref: '#/components/schemas/ContributionSort'
        - in: query
          name: direction
          description: Sort direction
          schema:
            type: string
            default: ASC
            enum:
              - ASC
              - DESC
        - in: query
          name: pageIndex
          description: Page number
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          schema:
            type: integer
      responses:
        "200":
          description: 'Contribution list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributionPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/{githubId}/stats:
    get:
      tags:
        - ReadUsers
      summary: Get user profile stats
      operationId: getUserProfileStats
      description: |
        Get the publicly available user profile stats
      parameters:
        - in: path
          name: githubId
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: ecosystem
          schema:
            $ref: '#/components/schemas/EcosystemId'
      responses:
        "200":
          description: 'User profile stats'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileStatsV2'
        "404":
          $ref: '#/components/responses/UserNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/{githubId}/languages:
    get:
      tags:
        - ReadUsers
      summary: Get user profile stats per languages
      operationId: getUserProfileStatsPerLanguages
      description: |
        Get the publicly available user stats per languages, ordered by rank
      parameters:
        - in: path
          name: githubId
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: pageIndex
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'User profile stats per languages'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileLanguagePage'
        "404":
          $ref: '#/components/responses/UserNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/{githubId}/ecosystems:
    get:
      tags:
        - ReadUsers
      summary: Get user profile stats per ecosystems
      operationId: getUserProfileStatsPerEcosystems
      description: |
        Get the publicly available user stats per ecosystems, ordered by rank
      parameters:
        - in: path
          name: githubId
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: pageIndex
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'User profile stats per ecosystems'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileEcosystemPage'
        "404":
          $ref: '#/components/responses/UserNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Create project
      operationId: createProject
      description: |
        Create new project. The caller must be a leader of the project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        "200":
          description: 'Create Project response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - ReadProjects
      summary: Get all projects
      operationId: getProjects
      description: |
        Get the paginated list of all projects on the platform that are visible to the caller.
      parameters:
        - in: query
          name: mine
          description: Filter my projects
          schema:
            type: boolean
        - in: query
          name: search
          description: Full text search
          schema:
            type: string
        - in: query
          name: tags
          description: Filter on project tags
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectTag'
        - in: query
          name: ecosystemSlugs
          description: Ecosystem filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EcosystemSlug'
        - in: query
          name: languageSlugs
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LanguageSlug'
        - in: query
          name: categorySlugs
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectCategorySlug'
        - in: query
          name: hasGoodFirstIssues
          required: false
          schema:
            type: boolean
        - in: query
          name: sort
          description: Sort order
          schema:
            type: string
            enum:
              - RANK
              - NAME
              - REPO_COUNT
              - CONTRIBUTOR_COUNT
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'List of projects'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPageResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/contributions/{contributionId}:
    get:
      tags:
        - Projects
      summary: Get contribution details
      operationId: getContribution
      description: |
        Get the details of a given contribution.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: contributionId
          required: true
          schema:
            $ref: '#/components/schemas/ContributionId'
      responses:
        "200":
          description: 'Contribution details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributionDetailsResponse'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/contributions/{contributionId}/unassign:
    post:
      tags:
        - Projects
      summary: Unassign contribution from contributor
      operationId: unassignContribution
      description: |
        Unassign contribution from contributor. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: contributionId
          required: true
          schema:
            $ref: '#/components/schemas/ContributionId'
      responses:
        "204":
          description: 'Contribution was unassigned successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/ignored-contributions:
    patch:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Update project's ignored contributions
      operationId: updateIgnoredContributions
      description: |
        Update project's ignored contributions. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectIgnoredContributionsRequest'
      responses:
        "204":
          description: 'The list of ignored contributions was updated successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/contributors/{githubUserId}/hidden:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Hide contributor
      operationId: hideContributor
      description: |
        Hide contributor. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: githubUserId
          required: true
          schema:
            $ref: '#/components/schemas/GithubUserId'
      responses:
        "204":
          description: 'The contributor was hidden successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Show contributor
      operationId: showContributor
      description: |
        Show contributor. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: githubUserId
          required: true
          schema:
            $ref: '#/components/schemas/GithubUserId'
      responses:
        "204":
          description: 'The contributor was hidden successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - ReadProjects
      summary: Get project details
      operationId: getProject
      description: |
        Get the project if it is visible to the caller.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: includeAllAvailableRepos
          schema:
            type: boolean
      responses:
        "200":
          description: 'The project'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Update project
      operationId: updateProject
      description: |
        Update project. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        "200":
          description: 'Update Project response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProjectResponse'
        "204":
          description: 'The project was updated successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/slug/{slug}:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - ReadProjects
      summary: Get project details
      operationId: getProjectBySlug
      description: |
        Get the project if it is visible to the caller.
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
        - in: query
          name: includeAllAvailableRepos
          schema:
            type: boolean
      responses:
        "200":
          description: 'The project'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/good-first-issues:
    get:
      security:
        - { }
      tags:
        - ReadProjects
      summary: Get project good first issues
      operationId: getProjectGoodFirstIssues
      description: |
        Get paginated list of project good first issues
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'List of project good first issues'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodFirstIssuesPageResponse'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/contributors:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - ReadProjects
      summary: Get all project contributors
      operationId: getProjectContributors
      description: |
        Get the paginated list of all contributors of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: login
          description: Filter by login (case-insensitive search by login)
          schema:
            type: string
        - in: query
          name: sort
          description: Sort order
          schema:
            $ref: '#/components/schemas/ContributorsPageSortBy'
        - in: query
          name: direction
          schema:
            $ref: '#/components/schemas/SortDirection'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: showHidden
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: 'List of project contributors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributorsPageResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/budgets:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project budgets
      operationId: getProjectBudgets
      description: |
        Get the list of all budgets from this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      responses:
        "200":
          description: 'List of budgets'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectBudgetsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/issues:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadProjects
      summary: Get project issues
      operationId: getProjectIssues
      description: |
        Get the list of all issues from every repos within this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: isAssigned
          description: |
            When true, only issues that have been assigned are returned.
            When false, only issues that have not been assigned are returned.
            When null, issues are not filtered by this field.
          schema:
            type: boolean
        - in: query
          name: isApplied
          description: |
            When true, only issues that have been applied to are returned.
            When false, only issues that have not been applied to are returned.
            When null, issues are not filtered by this field.
          schema:
            type: boolean
        - in: query
          name: sort
          required: true
          description: Sort order
          schema:
            $ref: '#/components/schemas/ProjectIssuesSort'
        - in: query
          name: direction
          required: true
          schema:
            $ref: '#/components/schemas/SortDirection'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'List of project issues'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectIssuesPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/issues/{issueId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadIssues
      summary: Get issue
      operationId: getIssue
      description: |
        Get an issue by id.
      parameters:
        - in: path
          name: issueId
          required: true
          schema:
            $ref: '#/components/schemas/IssueId'
      responses:
        "200":
          description: 'Issue'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GithubIssueResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewards:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadProjects
      summary: Get project rewards
      operationId: getProjectRewards
      description: |
        Get the list of all rewards granted from this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: currencies
          description: Currency filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyId'
        - in: query
          name: contributors
          description: Contributor filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubUserId'
        - in: query
          name: fromDate
          description: Date filter
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toDate
          description: Date filter
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: sort
          description: Sort order
          schema:
            $ref: '#/components/schemas/RewardsSort'
        - in: query
          name: direction
          schema:
            $ref: '#/components/schemas/SortDirection'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'List of rewards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Create reward
      operationId: createReward
      description: |
        Create new reward. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: 'New reward'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewardRequest'
      responses:
        "200":
          description: 'Reward'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRewardResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'


  /api/v1/projects/{projectId}/rewards/{rewardId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project reward by reward Id
      operationId: getProjectReward
      description: |
        Get reward details from this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: rewardId
          required: true
          schema:
            $ref: '#/components/schemas/RewardId'
      responses:
        "200":
          description: 'Reward details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardDetailsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/RewardForbiddenError'
        "404":
          $ref: '#/components/responses/RewardNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Create reward
      operationId: cancelReward
      description: |
        Create new reward. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: rewardId
          required: true
          schema:
            $ref: '#/components/schemas/RewardId'
      responses:
        "204":
          description: 'Reward deleted'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'


  /api/v1/projects/{projectId}/rewards/{rewardId}/reward-items:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project reward items page by reward Id
      operationId: getProjectRewardItemsPage
      description: |
        Get reward items details from this project. Only project leaders can access this information.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: path
          name: rewardId
          required: true
          schema:
            $ref: '#/components/schemas/RewardId'
        - in: query
          name: pageIndex
          description: Page number
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          schema:
            type: integer
      responses:
        "200":
          description: 'Reward details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardItemsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/RewardForbiddenError'
        "404":
          $ref: '#/components/responses/RewardNotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/contributions:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get all contributions of a project
      operationId: getProjectContributions
      description: |
        Get contributions of a given project. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: types
          description: Contribution type filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ContributionType'
        - in: query
          name: statuses
          description: Contribution status filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ContributionStatus'
        - in: query
          name: repositories
          description: Repository filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubRepoId'
        - in: query
          name: fromDate
          description: Contribution date filter
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toDate
          description: Contribution date filter
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: contributorIds
          description: Contributor filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/GithubUserId'
        - in: query
          name: sort
          description: Sorting field
          schema:
            $ref: '#/components/schemas/ProjectContributionSort'
        - in: query
          name: direction
          description: Sort direction
          schema:
            type: string
            default: ASC
            enum:
              - ASC
              - DESC
        - in: query
          name: pageIndex
          description: Page number
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          schema:
            type: integer

      responses:
        "200":
          description: 'Contribution list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributionPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get rewardable contributions of a user within the project
      operationId: getProjectRewardableContributions
      description: |
        Get rewardable contributions of a user on a given project. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: githubUserId
          required: true
          schema:
            $ref: '#/components/schemas/GithubUserId'
        - in: query
          name: pageIndex
          description: Page number
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          description: Number of items returned by page
          required: true
          schema:
            type: integer
        - in: query
          name: search
          required: false
          schema:
            type: string
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/RewardType'
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/ContributionStatus'
        - in: query
          name: include_ignored_items
          schema:
            type: boolean
            default: false
            description: True if the response should contain ignored rewardable items
      responses:
        "200":
          description: 'Rewardable contributions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardableItemsPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items/all-completed:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get ALL completed rewardable contributions of a user within the project
      operationId: getAllCompletedProjectRewardableContributions
      description: |
        Get ALL (without pagination) completed rewardable contributions of a user within the project. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: githubUserId
          required: true
          schema:
            $ref: '#/components/schemas/GithubUserId'
      responses:
        "200":
          description: 'Rewardable contributions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllRewardableItemsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items/other-works:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Create and close issue for a user within the project and returns it as a rewardable item
      operationId: addRewardableOtherWork
      description: |
        Create and close issue for a user within the project and returns it as a rewardable item. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: 'Create issue'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOtherWorkRequest'
      responses:
        "200":
          description: 'Rewardable other work (issue)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardableItemResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items/other-issues:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Index given issue and returns it as a rewardable item
      operationId: addRewardableOtherIssue
      description: |
        Index given issue and returns it as a rewardable item. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: 'Create issue'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOtherIssueRequest'
      responses:
        "200":
          description: 'Rewardable issue'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardableItemResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/rewardable-items/other-pull-requests:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Index given pull request and returns it as a rewardable item
      operationId: addRewardableOtherPullRequest
      description: |
        Index  pull request issue and returns it as a rewardable item. The caller must be a leader of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        description: 'Create issue'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOtherPullRequestRequest'
      responses:
        "200":
          description: 'Rewardable pull request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardableItemResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'


  /api/v1/projects/{projectId}/insights/contributors/newcomers:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project newcomers
      operationId: getProjectNewcomers
      description: |
        Get the paginated list of all contributors that recently joined the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'List of project newcomers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectNewcomersPageResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/insights/contributors/churned:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project churned contributors
      operationId: getProjectChurnedContributors
      description: |
        Get the paginated list of all contributors that recently left the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'List of project churned contributors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectChurnedContributorsPageResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/insights/contributors/most-actives:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project most active contributors
      operationId: getProjectMostActiveContributors
      description: |
        Get the paginated list of the most active contributors of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'List of project most active contributors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectContributorActivityPageResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/{projectId}/insights/contributions/staled:
    get:
      security:
        - { }
        - bearerAuth: [ ]
      tags:
        - Projects
      summary: Get project staled contributions
      operationId: getProjectStaledContributions
      description: |
        Get the paginated list of the staled contributions of the project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'List of project staled contributions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributionPageResponse'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/applications:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadProjectApplications
      summary: Get applications of a project's issue or a user
      operationId: getProjectsApplications
      description: |
        Get the list of all applications in a project or by a user.
        At least one of the parameters projectId or applicantId must be provided.
        Only project leaders or applicants can access this information.
      parameters:
        - in: query
          name: projectId
          schema:
            $ref: '#/components/schemas/ProjectId'
        - in: query
          name: issueId
          schema:
            $ref: '#/components/schemas/IssueId'
        - in: query
          name: applicantId
          schema:
            $ref: '#/components/schemas/GithubUserId'
        - in: query
          name: isApplicantProjectMember
          schema:
            type: boolean
        - in: query
          name: applicantLoginSearch
          schema:
            type: string
            example: 'John Doe'
            description: 'Search by user login, user languages, or user ecosystems'
        - in: query
          name: sort
          schema:
            $ref: '#/components/schemas/ProjectApplicationPageSort'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: 'List of applications'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApplicationPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/applications/{applicationId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadProjectApplications
      summary: Get application
      operationId: getProjectApplication
      description: |
        Get the details of an application. 
        Only application's project's leaders or application's applicant can access this information.
      parameters:
        - in: path
          name: applicationId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectApplicationId'
      responses:
        "200":
          description: 'Application details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApplicationResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - ProjectApplications
      summary: Delete application
      operationId: deleteProjectApplication
      description: |
        Delete application. Only the applicant or the project lead can delete an application.
      parameters:
        - in: path
          name: applicationId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectApplicationId'
      responses:
        "204":
          description: 'The application was deleted successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/applications/{applicationId}/accept:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - ProjectApplications
      summary: Accept an application
      operationId: acceptProjectApplication
      description: |
        Accept an application. Only the project lead can accept an application.
        The issue will be assigned to the applicant on GitHub.
      parameters:
        - in: path
          name: applicationId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectApplicationId'
      responses:
        "204":
          description: 'The application was approved successfully.'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/logos:
    post:
      security:
        - { }
      tags:
        - Projects
      summary: Upload a project logo
      operationId: uploadProjectLogo
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: 'Image uploaded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadImageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/projects/categories/suggest:
    post:
      security:
        - apiKey: [ ]
      tags:
        - Projects
      summary: Suggest project category
      operationId: suggestProjectCategory
      description: |
        Project lead can suggest a new project category.
      requestBody:
        description: 'Project category'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestProjectCategoryRequest'

      responses:
        "204":
          description: 'Category suggested'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Create a new billing profile
      operationId: createBillingProfile
      description: |
        Create a new billing profile.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileRequest'
      responses:
        "200":
          description: 'Billing profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfileResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Get billing profile by id
      operationId: getBillingProfile
      description: |
        Get billing profile by id
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      responses:
        "200":
          description: 'Billing profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfileResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Delete billing profile by id
      operationId: deleteBillingProfile
      description: |
        Delete billing profile by id
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      responses:
        "204":
          description: 'Billing profile was successfully deleted'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/billing-profiles/{billingProfileId}/type:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Update billing profile type
      operationId: updateBillingProfileType
      description: |
        Update billing profile type (allows to switch between self-employed and company types)
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileTypeRequest'
      responses:
        "204":
          description: 'User billing profile type updated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/billing-profiles/{billingProfileId}/enable:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Enable billing profile
      operationId: enableBillingProfile
      description: |
        Enable billing profile
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileEnableRequest'
      responses:
        "204":
          description: 'Billing profile was disabled or activated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/invoiceable-rewards:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Get payable rewards linked to given billing profile
      operationId: getInvoiceableRewards
      description: |
        Get payable rewards linked to given billing profile
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      responses:
        "200":
          description: 'Payable rewards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfileInvoiceableRewardsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/payout-info:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Get payout info of the given billing profile
      operationId: getPayoutInfo
      description: |
        Get payout info of the given billing profile. Caller must be admin of the billing profile.
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      responses:
        "200":
          description: 'Coworkers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfilePayoutInfoResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Set payout info of the given billing profile
      operationId: setPayoutInfo
      description: |
        Set payout info of the given billing profile. Caller must be an admin of the billing profile.
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfilePayoutInfoRequest'
      responses:
        "204":
          description: 'Coworker invited'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/coworkers:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Get coworkers linked to given billing profile
      operationId: getCoworkers
      description: |
        Get coworkers linked to given billing profile. Caller must be admin of the billing profile.
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'Coworkers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfileCoworkersPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Invite coworker to given billing profile
      operationId: inviteCoworker
      description: |
        Invite coworker to given billing profile. Caller must be admin of the billing profile.
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingProfileCoworkerInvitationRequest'
      responses:
        "204":
          description: 'Coworker invited'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/coworkers/{githubUserId}:
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Remove coworker from billing profile
      operationId: removeCoworker
      description: |
        Remove a coworker (or cancel his invitation) from billing profile. Caller must be an admin of the billing profile.
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
        - in: path
          name: githubUserId
          required: true
          schema:
            $ref: '#/components/schemas/GithubUserId'
      responses:
        "204":
          description: 'Coworker removed'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/coworkers/{githubUserId}/role:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Update coworker role
      operationId: updateCoworkerRole
      description: |
        Update coworker role. Caller must be an admin of the billing profile.
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            $ref: '#/components/schemas/BillingProfileId'
        - in: path
          name: githubUserId
          required: true
          schema:
            $ref: '#/components/schemas/GithubUserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCoworkerRoleRequest'
      responses:
        "204":
          description: 'Coworker updated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/invoice-preview:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Preview new invoice from selected reward ids and given a billing profile id
      operationId: previewNewInvoiceForRewardIds
      description: |
        Preview new invoice from selected reward ids
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: rewardIds
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "200":
          description: 'Invoice created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicePreviewResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/ProjectForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/invoices:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Get invoices linked to given billing profile
      operationId: getInvoices
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: sort
          description: Sort order
          schema:
            default: CREATED_AT
            type: string
            enum:
              - INVOICE_NUMBER
              - CREATED_AT
              - AMOUNT
              - STATUS
        - in: query
          name: direction
          schema:
            default: DESC
            type: string
            enum:
              - ASC
              - DESC
      responses:
        "200":
          description: 'Page of invoices linked to given billing profile'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProfileInvoicesPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/invoices/{invoiceId}:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Upload an invoice linked to a given billing profile
      operationId: uploadInvoice
      requestBody:
        content:
          application/pdf:
            schema:
              type: string
              format: binary
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: invoiceId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: fileName
          required: false
          schema:
            type: string
      responses:
        "204":
          description: 'Invoice uploaded'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - BillingProfiles
      summary: Download invoice by id linked to given billing profile
      operationId: downloadInvoice
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: invoiceId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: 'Pdf as blob'
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/ecosystems:
    get:
      security:
        - { }
      tags:
        - Ecosystems
      summary: Get all ecosystems
      operationId: getAllEcosystems
      parameters:
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'Page of ecosystem'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'
  /api/v1/ecosystems/{ecosystemSlug}/contributors:
    get:
      security:
        - { }
      tags:
        - ReadEcosystems
      summary: Get ecosystem contributors
      operationId: getEcosystemContributors
      parameters:
        - in: path
          name: ecosystemSlug
          description: Ecosystem slug
          required: true
          schema:
            $ref: '#/components/schemas/EcosystemSlug'
        - in: query
          name: sort
          required: true
          description: Sort order
          schema:
            $ref: '#/components/schemas/EcosystemContributorsFilter'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 'Page of ecosystem contributors'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemContributorsPage'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v2/ecosystems:
    get:
      security:
        - { }
      tags:
        - ReadEcosystems
      summary: Get ecosystems page
      operationId: getEcosystemsPage
      parameters:
        - in: query
          name: featured
          required: false
          schema:
            type: boolean
            default: false
        - in: query
          name: hidden
          required: false
          schema:
            type: boolean
            default: false
        - in: query
          name: pageIndex
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'Page of ecosystem'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemPageV2'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/ecosystems/slug/{slug}:
    get:
      security:
        - { }
      tags:
        - ReadEcosystems
      summary: Get ecosystem details by slug
      operationId: getEcosystemBySlug
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            $ref: '#/components/schemas/EcosystemSlug'
      responses:
        "200":
          description: 'Ecosystem details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemDetailsResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/ecosystems/slug/{slug}/languages:
    get:
      security:
        - { }
      tags:
        - ReadEcosystems
      summary: Get ecosystem languages page
      operationId: getEcosystemLanguages
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            $ref: '#/components/schemas/EcosystemSlug'
        - in: query
          name: pageIndex
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'Ecosystem project languages'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemLanguagesPageResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/ecosystems/slug/{slug}/project-categories:
    get:
      security:
        - { }
      tags:
        - ReadEcosystems
      summary: Get ecosystem categories page
      operationId: getEcosystemCategories
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            $ref: '#/components/schemas/EcosystemSlug'
        - in: query
          name: pageIndex
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'Ecosystem project categories'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemProjectCategoriesPageResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/billing-profiles/{billingProfileId}/invoices/mandate:
    put:
      security:
        - { }
      tags:
        - BillingProfiles
      summary: Accept or decline OnlyDust invoice mandate for billing profile
      operationId: acceptOrDeclineInvoiceMandate
      parameters:
        - in: path
          name: billingProfileId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceMandateRequest'
      responses:
        "204":
          description: 'Invoice mandate accepted'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/sponsors/{sponsorId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Sponsors
      summary: Get sponsor data
      operationId: getSponsor
      description: |
        Get sponsor data
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
      responses:
        "200":
          description: 'Sponsor data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorDetailsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/sponsors/{sponsorId}/transactions:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Sponsors
      summary: Get the list of all transactions related to this sponsor
      operationId: getSponsorTransactionHistory
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
        - in: query
          name: pageIndex
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
        - in: query
          name: fromDate
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: toDate
          schema:
            type: string
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$'
        - in: query
          name: currencies
          description: Currency filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CurrencyId'
        - in: query
          name: projects
          description: Project filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProjectId'
        - in: query
          name: types
          description: Transaction type filter
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SponsorAccountTransactionType'
        - in: query
          name: sort
          description: Sort order
          schema:
            enum:
              - DATE
              - TYPE
              - AMOUNT
              - PROJECT
        - in: query
          name: direction
          schema:
            enum:
              - ASC
              - DESC
      responses:
        "200":
          description: 'The sponsor transaction history'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionHistoryPageResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/sponsors/{sponsorId}/allocate:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Sponsors
      summary: Allocate a budget to a project
      operationId: allocateBudgetToProject
      description: Allocate a budget to a project
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
      requestBody:
        description: Budget to allocate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllocateRequest'
      responses:
        "204":
          description: 'The funds have been allocated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/sponsors/{sponsorId}/unallocate:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Sponsors
      summary: Allocate a budget to a project
      operationId: unallocateBudgetFromProject
      description: Unallocate some budget from a project
      parameters:
        - in: path
          name: sponsorId
          required: true
          schema:
            $ref: '#/components/schemas/SponsorId'
      requestBody:
        description: Budget to unallocate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllocateRequest'
      responses:
        "204":
          description: 'The funds have been allocated'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/hackathons:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadHackathons
      summary: Get hackathons list
      operationId: getHackathons
      description: |
        Get hackathons list
      responses:
        "200":
          description: 'hackathons list'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HackathonsListResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/hackathons/slug/{hackathonSlug}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadHackathons
      summary: Get hackathon by slug
      operationId: getHackathonBySlug
      description: |
        Get hackathon by slug
      parameters:
        - in: path
          name: hackathonSlug
          required: true
          schema:
            $ref: '#/components/schemas/HackathonSlug'
      responses:
        "200":
          description: 'hackathon response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HackathonsDetailsResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/committees/{committeeId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadCommittees
      summary: Get committee
      operationId: getCommittee
      description: |
        Get committee
      parameters:
        - in: path
          name: committeeId
          required: true
          schema:
            $ref: '#/components/schemas/CommitteeId'
      responses:
        "200":
          description: 'Committee response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitteeResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/committees/{committeeId}/projects/applications:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadCommittees
      summary: Get committee application
      operationId: getCommitteeApplication
      description: |
        Get committee application
      parameters:
        - in: path
          name: committeeId
          required: true
          schema:
            $ref: '#/components/schemas/CommitteeId'
        - in: query
          name: projectId
          required: false
          schema:
            $ref: '#/components/schemas/ProjectId'
      responses:
        "200":
          description: 'Committee application response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitteeApplicationResponse'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/committees/{committeeId}/projects/{projectId}/applications:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Committees
      summary: Create/Update project application for committee
      operationId: createUpdateApplicationForCommittee
      description: |
        Create/Update project application for committee
      parameters:
        - in: path
          name: committeeId
          required: true
          schema:
            $ref: '#/components/schemas/CommitteeId'
        - in: path
          name: projectId
          required: true
          schema:
            $ref: '#/components/schemas/ProjectId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitteeApplicationRequest'
      responses:
        "204":
          description: 'Create/Update project application for committee'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/ecosystems/{ecosystemSlug}/projects:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadEcosystems
      summary: Get all projects
      operationId: getEcosystemProjects
      description: |
        Get the (soon to be paginated) list of all public projects on the platform.
      parameters:
        - in: path
          name: ecosystemSlug
          description: Ecosystem slug
          required: true
          schema:
            $ref: '#/components/schemas/EcosystemSlug'
        - in: query
          name: hasGoodFirstIssues
          required: false
          schema:
            type: boolean
        - in: query
          name: featuredOnly
          required: false
          schema:
            type: boolean
        - in: query
          name: pageIndex
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 5
        - in: query
          name: sortBy
          required: false
          schema:
            $ref: '#/components/schemas/EcosystemProjectsSortBy'
        - in: query
          name: tag
          required: false
          schema:
            $ref: '#/components/schemas/ProjectTag'
      responses:
        "200":
          description: 'List of ecosystem projects'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EcosystemProjectPageResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/project-categories:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadProjectCategories
      summary: Get all project categories
      operationId: getAllProjectCategories
      description: |
        Get all project categories
      responses:
        "200":
          description: 'List of project categories'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCategoriesResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/public-activity:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - ReadActivity
      summary: Get latest public activity
      operationId: getPublicActivity
      description: |
        Get latest public activity
      parameters:
        - in: query
          name: pageIndex
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: 'List lastest public activities'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicActivityPageResponse'
        "500":
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: Api-Key

  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          example:
            message: Github API is not responding
            status: 500
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          example:
            message: You must be authenticated to make this call
            status: 401
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    NotFoundError:
      description: Requested resource not found
      content:
        application/json:
          example:
            message: NOT_FOUND
            status: 404
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    ProjectForbiddenError:
      description: Forbidden. The project is not visible to the caller.
      content:
        application/json:
          example:
            message: Access to this project is forbidden
            status: 403
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    RewardNotFoundError:
      description: Reward not found
      content:
        application/json:
          example:
            message: Reward not found
            status: 404
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    RewardForbiddenError:
      description: Forbidden. The reward is not visible to the caller.
      content:
        application/json:
          example:
            message: Access to this reward is forbidden
            status: 403
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    UserNotFoundError:
      description: User not found
      content:
        application/json:
          example:
            message: User not found
            status: 404
            id: 4f7c660e-6cf1-4424-b240-e630c4c19069
          schema:
            $ref: '#/components/schemas/OnlyDustError'

  schemas:
    # ERRORS ==================================================================
    OnlyDustError:
      type: object
      description: Error contract strongly inspired by JSON problem (rfc7807) specification
      required:
        - message
        - status
        - id
      properties:
        message:
          type: string
          description: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.
          example: Not enough credit.
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 400
        id:
          type: string
          format: uuid
          description: The error id
          example: 4f7c660e-6cf1-4424-b240-e630c4c19069

    CurrencyListResponse:
      type: object
      description: List of currencies
      required:
        - currencies
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/ShortCurrencyResponse'


    # VALUE OBJECTS ==================================================================
    ContributionId:
      type: string
      description: Contribution ID
      example: 2189e8dc91876fa1686e81b09de33ca7bdca08e80854d4cada02c8288cf03739

    UserId:
      type: string
      format: uuid
      description: OnlyDust user ID

    GithubUserId:
      type: integer
      format: int64
      description: Github user ID (databaseId)
      example: 595505

    GithubRepoId:
      type: integer
      format: int64
      description: Github repo ID (databaseId)
      example: 650626566

    IssueId:
      type: integer
      format: int64
      description: Github issue ID (databaseId)
      example: 1678794252

    ProjectId:
      type: string
      format: uuid
      description: OnlyDust project ID

    ProjectApplicationId:
      type: string
      format: uuid
      description: Application ID

    ProjectApplicationOrigin:
      type: string
      description: Application origin
      enum:
        - GITHUB
        - MARKETPLACE

    TransactionId:
      type: string
      format: uuid
      description: Sponsor account transaction ID

    ProjectSlug:
      type: string
      description: OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
      example: my-awesome-project

    HackathonId:
      type: string
      format: uuid
      description: OnlyDust hackathon ID

    HackathonSlug:
      type: string
      description: OnlyDust hackathon pretty ID that is computed from its name. This ID CAN change over time.
      example: my-awesome-hackathon

    CurrencyId:
      type: string
      format: uuid
      description: Currency ID

    SponsorId:
      type: string
      format: uuid
      description: OnlyDust sponsor ID

    EcosystemId:
      type: string
      format: uuid
      description: OnlyDust ecosystem ID

    ProjectCategoryId:
      type: string
      format: uuid

    ProjectCategorySlug:
      type: string
      description: OnlyDust project category pretty ID that is computed from its name.

    LanguageId:
      type: string
      format: uuid
      description: OnlyDust language ID

    LanguageSlug:
      type: string
      description: OnlyDust language slug

    RewardId:
      type: string
      format: uuid
      description: OnlyDust reward ID

    BillingProfileId:
      type: string
      format: uuid
      description: Billing profile ID

    GithubInstallationId:
      type: integer
      format: int64
      description: Github installation ID
      example: 123456

    CommitteeId:
      type: string
      format: uuid
      description: OnlyDust committee ID

    CommitteeCriteriaId:
      type: string
      format: uuid
      description: OnlyDust committee criteria ID

    EcosystemSlug:
      type: string
      description: OnlyDust ecosystem pretty ID that is computed from its name. This ID CAN change over time.
      example: zama


    Money:
      type: object
      description: Money value object
      required:
        - amount
        - prettyAmount
        - currency
      properties:
        amount:
          type: number
          description: Amount of money
          example: 100
        prettyAmount:
          type: number
        currency:
          $ref: '#/components/schemas/ShortCurrencyResponse'
        usdEquivalent:
          type: number
          description: USD equivalent of the amount
          example: 100
        usdConversionRate:
          type: number
          description: USD conversion rate
          example: 1.5

    DetailedTotalMoney:
      type: object
      description: Detailed total money value object
      required:
        - totalUsdEquivalent
        - totalByCurrency
      properties:
        totalUsdEquivalent:
          type: number
          description: USD equivalent of the total amount
          example: 100
        totalPerCurrency:
          type: array
          description: Total amount by currency
          items:
            $ref: '#/components/schemas/Money'


    # RESPONSES ==================================================================
    GithubUserResponse:
      type: object
      required:
        - githubUserId
        - login
        - avatarUrl
      properties:
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'
        login:
          type: string
          description: User's Github login
          example: ofux
        avatarUrl:
          type: string
          format: url
          description: Direct URL to user's avatar image
          example: 'https://avatars.githubusercontent.com/u/595505?v=4'

    RegisteredUserResponse:
      required:
        - id
      allOf:
        - $ref: '#/components/schemas/GithubUserResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/UserId'

    PersonIdentity:
      type: object
      properties:
        lastname:
          type: string
          example: Smith
        firstname:
          type: string
          example: John

    CompanyIdentity:
      type: object
      properties:
        name:
          type: string
          example: OnlyDust
        identificationNumber:
          type: string
          description: SIRET or equivalent
          example: 1873-4987-41234
        owner:
          $ref: '#/components/schemas/PersonIdentity'

    BillingProfilePayoutInfoResponse:
      type: object
      properties:
        hasValidPayoutSettings:
          type: boolean
        bankAccount:
          type: object
          properties:
            bic:
              type: string
              example: DAAEFRPPCCT
            number:
              type: string
              example: FR5417569000301995586997O41
        missingBankAccount:
          type: boolean
        ethWallet:
          type: string
          description: ETH wallet address or ENS
          example: vitalik.eth
        missingEthWallet:
          type: boolean
        optimismAddress:
          type: string
          example: 0x72C30FCD1e7bd691Ce206Cd36BbD87C4C7099545
        missingOptimismWallet:
          type: boolean
        aptosAddress:
          type: string
          example: 0xa645c3bdd0dfd0c3628803075b3b133e8426061dc915ef996cc5ed4cece6d4e5
        missingAptosWallet:
          type: boolean
        starknetAddress:
          type: string
          example: 0x056471aa79e3daebb62185cebee14fb0088b462b04ccf6e60ec9386044bec798
        missingStarknetWallet:
          type: boolean

    BillingProfilePayoutInfoRequest:
      type: object
      properties:
        bankAccount:
          type: object
          properties:
            bic:
              type: string
              example: DAAEFRPPCCT
            number:
              type: string
              example: FR5417569000301995586997O41
        ethWallet:
          type: string
          description: ETH wallet address or ENS
          example: vitalik.eth
        optimismAddress:
          type: string
          example: 0x72C30FCD1e7bd691Ce206Cd36BbD87C4C7099545
        aptosAddress:
          type: string
          example: 0xa645c3bdd0dfd0c3628803075b3b133e8426061dc915ef996cc5ed4cece6d4e5
        starknetAddress:
          type: string
          example: 0x056471aa79e3daebb62185cebee14fb0088b462b04ccf6e60ec9386044bec798

    UserProfileRequest:
      type: object
      properties:
        avatarUrl:
          type: string
          format: url
          description: Direct URL to user's avatar image
          example: 'https://avatars.githubusercontent.com/u/595505?v=4'
        location:
          type: string
          description: User location as in Github profile
          example: Paris, France
        bio:
          type: string
          description: User bio as in Github profile
          example: Contributing to awesome open source projects.
        website:
          type: string
          description: User website as in Github profile
        technologies:
          $ref: '#/components/schemas/Technologies'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ContactInformation'
        allocatedTimeToContribute:
          $ref: '#/components/schemas/AllocatedTime'
        isLookingForAJob:
          type: boolean
          description: Whether the user is looking for a job or not
        firstName:
          type: string
        lastName:
          type: string

    UserProfileCoverColor:
      type: string
      enum:
        - MAGENTA
        - CYAN
        - BLUE
        - YELLOW
      description: The cover color chosen by the user

    PrivateUserProfileResponse:
      allOf:
        - $ref: '#/components/schemas/GithubUserResponse'
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/UserId'
            location:
              type: string
              description: User location as in Github profile
              example: Paris, France
            bio:
              type: string
              description: User bio as in Github profile
              example: Contributing to awesome open source projects.
            website:
              type: string
              description: User website as in Github profile
            technologies:
              $ref: '#/components/schemas/Technologies'
            contacts:
              type: array
              items:
                $ref: '#/components/schemas/ContactInformation'
            firstName:
              type: string
            lastName:
              type: string
            allocatedTimeToContribute:
              $ref: '#/components/schemas/AllocatedTime'
            isLookingForAJob:
              type: boolean
              description: Whether the user is looking for a job or not

    PublicUserProfileResponseV2:
      allOf:
        - $ref: '#/components/schemas/GithubUserResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/UserId'
            htmlUrl:
              type: string
              format: uri
            location:
              type: string
              description: User location as in Github profile
              example: Paris, France
            bio:
              type: string
              description: User bio as in Github profile
              example: Contributing to awesome open source projects.
            website:
              type: string
              description: User website as in Github profile
            signedUpOnGithubAt:
              type: string
              format: date-time
              description: When the user signed up on Github
            signedUpAt:
              type: string
              format: date-time
              description: When the user signed up on OnlyDust
            lastSeenAt:
              type: string
              format: date-time
              description: The last time the user signed in on OnlyDust
            contacts:
              type: array
              items:
                $ref: '#/components/schemas/ContactInformation'
            statsSummary:
              $ref: '#/components/schemas/UserProfileStatsSummary'
            ecosystems:
              type: array
              description: List of ecosystems on which the user contributed
              items:
                $ref: '#/components/schemas/EcosystemResponse'

    UserRankCategory:
      type: string
      enum:
        - A
        - B
        - C
        - D
        - E
        - F

    UserProfileStatsSummary:
      type: object
      required:
        - rank
        - rankPercentile
        - rankCategory
        - contributionLevel
        - contributedProjectCount
        - leadedProjectCount
        - contributionCount
        - rewardCount
      properties:
        rank:
          type: integer
          description: User rank on OnlyDust (the lower, the better)
          example: 42
        rankPercentile:
          type: number
          description: User rank percentile between 0 and 100 on OnlyDust (the lower, the better)
          example: 10
        rankCategory:
          $ref: '#/components/schemas/UserRankCategory'
        contributedProjectCount:
          type: integer
          description: Number of projects on which the user contributed
          example: 22
        leadedProjectCount:
          type: integer
          description: Number of projects the user leads
          example: 3
        contributionCount:
          type: integer
          description: Total number of contributions made by the user within OnlyDust projects
          example: 145
        rewardCount:
          type: integer
          description: Total number of rewards received by the user
          example: 44

    UserProfileStatsV2:
      type: object
      required:
        - activity
        - earnings
        - workDistribution
      properties:
        activity:
          type: array
          items:
            $ref: '#/components/schemas/UserWeeklyStats'
        earnings:
          type: object
          required:
            - totalEarnedUsd
            - perProject
          properties:
            totalEarnedUsd:
              type: number
            perProject:
              type: array
              items:
                $ref: '#/components/schemas/UserProfileProjectEarnings'
        workDistribution:
          $ref: '#/components/schemas/UserWorkDistribution'

    UserProfileProjectEarnings:
      type: object
      required:
        - projectName
        - totalEarnedUsd
      properties:
        projectName:
          type: string
        totalEarnedUsd:
          type: number

    UserWeeklyStats:
      type: object
      required:
        - year
        - week
        - codeReviewCount
        - issueCount
        - pullRequestCount
        - rewardCount
      properties:
        year:
          type: integer
          example: 2023
        week:
          type: integer
          example: 34
        codeReviewCount:
          type: integer
        issueCount:
          type: integer
        pullRequestCount:
          type: integer
        rewardCount:
          type: integer

    UserWorkDistribution:
      type: object
      required:
        - codeReviewCount
        - issueCount
        - pullRequestCount
      properties:
        codeReviewCount:
          type: integer
        issueCount:
          type: integer
        pullRequestCount:
          type: integer

    PageResponse:
      type: object
      required:
        - totalPageNumber
        - totalItemNumber
        - hasMore
        - nextPageIndex
      properties:
        totalPageNumber:
          type: integer
        totalItemNumber:
          type: integer
        hasMore:
          type: boolean
        nextPageIndex:
          type: integer
          description: if there is no next page, it will be equals to the last page

    UserProfileLanguagePage:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - languages
          properties:
            languages:
              type: array
              items:
                $ref: '#/components/schemas/UserProfileLanguagePageItem'

    UserProfileLanguagePageItem:
      allOf:
        - $ref: '#/components/schemas/UserProfileSubStats'
        - type: object
          required:
            - language
          properties:
            language:
              $ref: '#/components/schemas/LanguageResponse'


    UserProfileEcosystemPage:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - ecosystems
          properties:
            ecosystems:
              type: array
              items:
                $ref: '#/components/schemas/UserProfileEcosystemPageItem'

    UserProfileEcosystemPageItem:
      allOf:
        - $ref: '#/components/schemas/UserProfileSubStats'
        - type: object
          required:
            - ecosystem
          properties:
            ecosystem:
              $ref: '#/components/schemas/EcosystemResponse'

    UserProfileSubStats:
      type: object
      required:
        - contributingStatus
        - contributedProjectCount
        - contributionCount
        - rewardCount
        - totalEarnedUsd
        - projects
      properties:
        rank:
          type: integer
          description: User rank on this project (the lower, the better)
          example: 42
        contributingStatus:
          $ref: '#/components/schemas/UserProfileContributingStatus'
        contributedProjectCount:
          type: integer
          description: Number of projects on which the user contributed in this language
          example: 22
        contributionCount:
          type: integer
          description: Total number of contributions made by the user in this language
          example: 145
        rewardCount:
          type: integer
          description: Total number of rewards received by the user granted on contributions in this language
          example: 44
        totalEarnedUsd:
          type: number
          description: Total USD-equivalent amount of all rewards granted on contributions in this language
          example: 25400
        projects:
          type: array
          description: List of projects on which the user contributed in this language, ordered by contribution count
          items:
            $ref: '#/components/schemas/ProjectLinkResponse'

    UserProfileContributingStatus:
      type: string
      enum:
        - RED
        - ORANGE
        - GREEN

    UserProfileStats:
      type: object
      required:
        - contributedProjectCount
        - leadedProjectCount
        - totalsEarned
        - contributionCount
        - contributionCountPerWeeks
        - contributionCountVariationSinceLastWeek
      properties:
        contributedProjectCount:
          type: integer
          description: Number of projects on which the user contributed
          example: 2
        leadedProjectCount:
          type: integer
          description: Number of projects the user leads
          example: 1
        totalsEarned:
          $ref: '#/components/schemas/RewardTotalAmountsResponse'
        contributionCount:
          type: integer
          description: Total number of contributions made by the user within OnlyDust projects
          example: 104
        contributionCountPerWeeks:
          type: array
          items:
            $ref: '#/components/schemas/UserContributionStats'
        contributionCountVariationSinceLastWeek:
          type: integer

    UserContributionStats:
      type: object
      required:
        - year
        - week
        - codeReviewCount
        - issueCount
        - pullRequestCount
      properties:
        year:
          type: integer
          example: 2023
        week:
          type: integer
          example: 34
        codeReviewCount:
          type: integer
        issueCount:
          type: integer
        pullRequestCount:
          type: integer

    UserProfileProjects:
      type: object
      required:
        - id
        - name
        - isLead
        - contributorCount
        - totalGranted
        - userContributionCount
        - userLastContributedAt
        - slug
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        name:
          type: string
          example: Verkle Tries
        isLead:
          type: boolean
          example: false
        leadSince:
          type: string
          format: date-time
          description: Since when the user is leading the project
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
        contributorCount:
          type: integer
          description: Total number of contributors within the project
          example: 163
        totalGranted:
          type: number
          description: Total USD-equivalent amount of all rewards granted on this project
          example: 25400
        userContributionCount:
          type: integer
          description: Number of contributions made by the user on this project
          example: 34
        userLastContributedAt:
          type: string
          format: date-time
          description: The last time the user contributed to this project
        slug:
          type: string
          description: Slug derived from project name
        visibility:
          $ref: '#/components/schemas/ProjectVisibility'

    ContactInformation:
      type: object
      required:
        - channel
        - contact
        - visibility
      properties:
        channel:
          $ref: '#/components/schemas/ContactInformationChannel'
        contact:
          type: string
          example: foobar@gmail.com
        visibility:
          type: string
          enum:
            - public
            - private

    ContactInformationChannel:
      type: string
      enum:
        - EMAIL
        - TELEGRAM
        - TWITTER
        - DISCORD
        - LINKEDIN
        - WHATSAPP

    AllocatedTime:
      type: string
      enum:
        - NONE
        - LESS_THAN_ONE_DAY
        - ONE_TO_THREE_DAYS
        - GREATER_THAN_THREE_DAYS

    ContributorSearchResponse:
      type: object
      required:
        - contributors
      properties:
        internalContributors:
          type: array
          items:
            $ref: '#/components/schemas/ContributorResponse'
        externalContributors:
          type: array
          items:
            $ref: '#/components/schemas/ContributorResponse'

    ContributorResponse:
      allOf:
        - $ref: '#/components/schemas/GithubUserResponse'
        - type: object
          required:
            - isRegistered
          properties:
            isRegistered:
              type: boolean
              description: True if the user is registered on OnlyDust

    ContributorsPageSortBy:
      type: string
      enum:
        - LOGIN
        - CONTRIBUTION_COUNT
        - REWARD_COUNT
        - EARNED
        - TO_REWARD_COUNT
      default: LOGIN

    ContributorsPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - contributors
            - hasHiddenContributors
          properties:
            hasHiddenContributors:
              description: Whether there are hidden contributors in the project for the current user
              type: boolean
            contributors:
              type: array
              items:
                $ref: '#/components/schemas/ContributorPageItemResponse'

    ContributorPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/ContributorResponse'
        - type: object
          required:
            - contributionCount
            - rewardCount
            - earned
          properties:
            contributionCount:
              type: integer
              description: Total number of contributions the contributor made on this project.
              example: 22
            rewardCount:
              type: integer
              description: Total number of rewards the contributor got on this project.
              example: 10
            earned:
              $ref: '#/components/schemas/RewardTotalAmountsResponse'
            contributionToRewardCount:
              type: integer
              description: Total number of contributions the contributor was not rewarded for on this project.
              example: 9
            pullRequestToReward:
              type: integer
              example: 2
            issueToReward:
              type: integer
              example: 4
            codeReviewToReward:
              type: integer
              example: 3
            hidden:
              type: boolean
              description: Whether the contributor is hidden to the user

    GoodFirstIssuesPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - issues
          properties:
            issues:
              type: array
              items:
                $ref: '#/components/schemas/GithubIssuePageItemResponse'

    SponsorResponse:
      type: object
      required:
        - id
        - name
        - url
        - logoUrl
      properties:
        id:
          $ref: '#/components/schemas/SponsorId'
        name:
          type: string
          description: Sponsor name
          example: Ethereum Foundation
        url:
          type: string
          format: url
          description: URL of sponsor's website
          example: 'https://ethereum.org'
        logoUrl:
          type: string
          format: url
          description: Direct URL to sponsor's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png'

    SponsorDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/SponsorResponse'
        - type: object
          required:
            - availableBudgets
            - projects
          properties:
            availableBudgets:
              type: array
              items:
                $ref: '#/components/schemas/Money'
            projects:
              type: array
              items:
                $ref: '#/components/schemas/ProjectWithBudgetResponse'

    EcosystemResponse:
      type: object
      required:
        - id
        - name
        - url
        - logoUrl
        - slug
      properties:
        id:
          $ref: '#/components/schemas/EcosystemId'
        name:
          type: string
          description: Ecosystem name
          example: Ethereum Foundation
        url:
          type: string
          format: url
          description: URL of ecosystem's website
          example: 'https://ethereum.org'
        logoUrl:
          type: string
          format: url
          description: Direct URL to ecosystem's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png'
        bannerUrl:
          type: string
          format: url
          description: Direct URL to ecosystem's banner image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png'
        slug:
          $ref: '#/components/schemas/EcosystemSlug'

    EcosystemShortResponse:
      type: object
      required:
        - id
        - slug
        - name
        - description
        - topProjects
        - banners
      properties:
        id:
          $ref: '#/components/schemas/EcosystemId'
        slug:
          $ref: '#/components/schemas/EcosystemSlug'
        name:
          type: string
          description: Ecosystem name
          example: Ethereum Foundation
        description:
          type: string
          description: Ecosystem description
          example: A short ecosystem description
        banners:
          type: object
          required:
            - xl
            - md
          properties:
            xl:
              $ref: '#/components/schemas/EcosystemBanner'
            md:
              $ref: '#/components/schemas/EcosystemBanner'

    EcosystemBanner:
      type: object
      required:
        - url
        - fontColor
      properties:
        url:
          type: string
          format: uri
        fontColor:
          type: string
          format: color
          enum:
            - DARK
            - LIGHT

    EcosystemPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/EcosystemShortResponse'
        - type: object
          required:
            - projectCount
          properties:
            topProjects:
              type: array
              items:
                $ref: '#/components/schemas/ProjectLinkResponse'
            projectCount:
              type: integer
              description: Number of projects within the ecosystem
              example: 2
            topProjectCategories:
              type: array
              items:
                $ref: '#/components/schemas/ProjectCategoryResponse'
            projectCategoryCount:
              type: integer
              description: Number of project categories within the ecosystem
              example: 2

    EcosystemDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/EcosystemShortResponse'
        - type: object
          properties:
            relatedArticles:
              type: array
              items:
                $ref: '#/components/schemas/EcosystemArticle'

    EcosystemArticle:
      type: object
      required:
        - title
        - url
        - imageUrl
        - description
      properties:
        title:
          type: string
          example: The title of the article
        url:
          type: string
          format: uri
          example: 'https://onlydust.com/article'
        imageUrl:
          type: string
          format: uri
          example: 'https://onlydust.com/article-image.jpg'
        description:
          type: string
          example: A short description of the article

    EcosystemLanguagesPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - languages
          properties:
            languages:
              type: array
              items:
                $ref: '#/components/schemas/LanguageResponse'

    EcosystemProjectCategoriesPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - projectCategories
          properties:
            projectCategories:
              type: array
              items:
                $ref: '#/components/schemas/ProjectCategoryResponse'

    LanguageResponse:
      type: object
      required:
        - id
        - slug
        - name
        - logoUrl
      properties:
        id:
          $ref: '#/components/schemas/LanguageId'
        slug:
          $ref: '#/components/schemas/LanguageSlug'
        name:
          type: string
          description: Language name
          example: Rust
        logoUrl:
          type: string
          format: url
          description: Direct URL to language's logo image
          example: 'https://rust.org/logo.png'
        bannerUrl:
          type: string
          format: url
          description: Direct URL to language's banner image
          example: 'https://rust.org/banner.png'

    ProjectPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - projects
          properties:
            projects:
              type: array
              items:
                $ref: '#/components/schemas/ProjectPageItemResponse'
            languages:
              type: array
              items:
                $ref: '#/components/schemas/LanguageResponse'
            ecosystems:
              type: array
              items:
                $ref: '#/components/schemas/EcosystemResponse'
            categories:
              type: array
              items:
                $ref: '#/components/schemas/ProjectCategoryResponse'

    ProjectPageItemResponse:
      type: object
      required:
        - id
        - slug
        - name
        - shortDescription
        - hiring
        - visibility
        - repoCount
        - contributorCount
        - leaders
        - ecosystems
        - technologies
        - isInvitedAsProjectLead
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        slug:
          $ref: '#/components/schemas/ProjectSlug'
        name:
          type: string
          example: Verkle Tries
        shortDescription:
          type: string
          example: A short project description
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
        hiring:
          type: boolean
          description: Is the project currently hiring?
        visibility:
          $ref: '#/components/schemas/ProjectVisibility'
        repoCount:
          type: integer
          description: Number of github repositories included in the project
          example: 2
        contributorCount:
          type: integer
          description: Total number of contributors within the project
          example: 163
        remainingUsdBudget:
          type: number
          description: Remaining budget of the project in USD
          example: 1223.40
        leaders:
          type: array
          items:
            $ref: '#/components/schemas/RegisteredUserResponse'
        ecosystems:
          type: array
          items:
            $ref: '#/components/schemas/EcosystemResponse'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageResponse'
        isInvitedAsProjectLead:
          type: boolean
          default: false
        hasMissingGithubAppInstallation:
          type: boolean
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ProjectTag'

    ProjectResponse:
      type: object
      required:
        - id
        - slug
        - name
        - createdAt
        - shortDescription
        - longDescription
        - moreInfos
        - hiring
        - visibility
        - contributorCount
        - topContributors
        - leaders
        - invitedLeaders
        - ecosystems
        - categories
        - languages
        - hasRemainingBudget
        - indexingComplete
        - indexedAt
        - goodFirstIssueCount
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        slug:
          $ref: '#/components/schemas/ProjectSlug'
        name:
          type: string
          example: Verkle Tries
        createdAt:
          type: string
          format: date-time
          description: When the project was created
        shortDescription:
          type: string
          example: A short project description
        longDescription:
          type: string
          example: A lonnnnnnnnnnnnng project description
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
        moreInfos:
          type: array
          items:
            $ref: '#/components/schemas/SimpleLink'
        hiring:
          type: boolean
          description: Is the project currently hiring?
        visibility:
          $ref: '#/components/schemas/ProjectVisibility'
        contributorCount:
          type: integer
          description: Total number of contributors within the project
          example: 163
        topContributors:
          type: array
          description: The top 3 contributors (by contribution count) of this project
          maxItems: 3
          items:
            $ref: '#/components/schemas/GithubUserResponse'
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/GithubOrganizationResponse'
        leaders:
          type: array
          items:
            $ref: '#/components/schemas/RegisteredUserResponse'
        invitedLeaders:
          type: array
          items:
            $ref: '#/components/schemas/RegisteredUserResponse'
        ecosystems:
          type: array
          items:
            $ref: '#/components/schemas/EcosystemResponse'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ProjectCategoryResponse'
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/SponsorResponse'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageResponse'
        hasRemainingBudget:
          type: boolean
        rewardSettings:
          $ref: '#/components/schemas/ProjectRewardSettings'
        indexingComplete:
          type: boolean
          description: Is the project indexing complete?
        indexedAt:
          type: string
          format: date-time
          description: When the project was indexed
        me:
          $ref: '#/components/schemas/ProjectMeResponse'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/ProjectTag'
        goodFirstIssueCount:
          type: integer
          description: Number of good first issues in the project
          example: 5

    ProjectMeResponse:
      type: object
      properties:
        isMember:
          type: boolean
          description: Is the user a member of the project?
        isContributor:
          type: boolean
          description: Is the user a contributor of the project?
        isProjectLead:
          type: boolean
          description: Is the user a project lead of the project?
        isInvitedAsProjectLead:
          type: boolean
          description: Is the user invited as a project lead of the project?

    ProjectLinkResponse:
      type: object
      required:
        - id
        - slug
        - name
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        slug:
          $ref: '#/components/schemas/ProjectSlug'
        name:
          type: string
        logoUrl:
          type: string

    ProjectLinkWithDescriptionResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectLinkResponse'
        - type: object
          required:
            - shortDescription
          properties:
            shortDescription:
              type: string
              example: A short project description

    ProjectShortResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectLinkResponse'
        - type: object
          required:
            - shortDescription
          properties:
            id:
              $ref: '#/components/schemas/ProjectId'
            slug:
              $ref: '#/components/schemas/ProjectSlug'
            name:
              type: string
              example: Verkle Tries
            shortDescription:
              type: string
              example: A short project description
            logoUrl:
              type: string
              format: url
              description: Direct URL to project's logo image
              example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
            visibility:
              $ref: '#/components/schemas/ProjectVisibility'

    ProjectVisibility:
      type: string
      enum:
        - PUBLIC
        - PRIVATE
      description: Is the project visible to anyone?

    GithubOrganizationResponse:
      allOf:
        - $ref: '#/components/schemas/GithubUserResponse'
        - type: object
          required:
            - name
            - repos
            - canBeInstalled
            - isCurrentUserAdmin
            - installationStatus
          properties:
            name:
              type: string
              example: OnlyDust
            htmlUrl:
              type: string
              format: uri
            repos:
              type: array
              description: Github repos linked to installed organization
              items:
                $ref: '#/components/schemas/GithubRepoResponse'
            isCurrentUserAdmin:
              type: boolean
            isPersonal:
              type: boolean
            installationId:
              type: integer
              format: int64
            installationStatus:
              $ref: '#/components/schemas/GithubOrganizationInstallationStatus'

    GithubOrganizationInstallationStatus:
      type: string
      enum:
        - NOT_INSTALLED
        - SUSPENDED
        - MISSING_PERMISSIONS
        - COMPLETE

    GithubRepoLinkResponse:
      type: object
      required:
        - id
        - owner
        - name
        - htmlUrl
      properties:
        id:
          $ref: '#/components/schemas/GithubRepoId'
        name:
          type: string
          description: Repo name on Github
          example: marketplace-backend
        description:
          type: string
          description: Repo description on Github
          example: Awesome repo
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the repo
          example: https://github.com/onlydustxyz/marketplace-backend

    ShortGithubRepoResponse:
      type: object
      required:
        - id
        - owner
        - name
        - htmlUrl
      properties:
        id:
          $ref: '#/components/schemas/GithubRepoId'
        owner:
          type: string
          description: Repo owner on Github
          example: onlydustxyz
        name:
          type: string
          description: Repo name on Github
          example: marketplace-backend
        description:
          type: string
          description: Repo description on Github
          example: Awesome repo
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the repo
          example: https://github.com/onlydustxyz/marketplace-backend

    GithubRepoResponse:
      allOf:
        - $ref: '#/components/schemas/ShortGithubRepoResponse'
        - type: object
          required:
            - isIncludedInProject
          properties:
            stars:
              type: integer
              description: Number of stars on Github
              example: 625
            forkCount:
              type: integer
              description: Fork count on Github
              example: 3
            hasIssues:
              type: boolean
              description: Are issues enabled on Github for this repo
            isIncludedInProject:
              type: boolean
              description: Is the repo included in the project?
            isAuthorizedInGithubApp:
              type: boolean
              description: Is the repo authorized in the Github app?


    Technologies:
      type: object
      description: List fo technologies ordered by mastering level (the higher the better) or usage (ie. line count of a language)
      additionalProperties:
        type: integer
        format: int64
      example:
        Rust: 91283
        Go: 12388
        Java: 1233

    AllTechnologiesResponse:
      type: object
      properties:
        technologies:
          type: array
          items:
            type: string
          example:
            - Rust
            - Go
            - Java

    CreateRewardResponse:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/RewardId'

    RewardsPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - rewards
          properties:
            rewards:
              type: array
              items:
                $ref: '#/components/schemas/RewardPageItemResponse'
            remainingBudget:
              $ref: '#/components/schemas/DetailedTotalMoney'
            spentAmount:
              $ref: '#/components/schemas/DetailedTotalMoney'
            sentRewardsCount:
              type: integer
              description: Number of rewards that have been sent
            rewardedContributionsCount:
              type: integer
              description: Number of contributions that have been rewarded
            rewardedContributorsCount:
              type: integer
              description: Number of contributors that have been rewarded

    MyRewardsPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - rewards
          properties:
            rewards:
              type: array
              items:
                $ref: '#/components/schemas/MyRewardPageItemResponse'
            rewardedAmount:
              $ref: '#/components/schemas/DetailedTotalMoney'
            pendingAmount:
              $ref: '#/components/schemas/DetailedTotalMoney'
            receivedRewardsCount:
              type: integer
              description: Number of rewards that have been received
            rewardedContributionsCount:
              type: integer
              description: Number of contributions that have been rewarded
            rewardingProjectsCount:
              type: integer
              description: Number of projects the user has been rewarded for
            pendingRequestCount:
              type: integer
              description: Number of rewards at pending request status

    RewardPageItemResponse:
      type: object
      required:
        - status
        - numberOfRewardedContributions
        - rewardedUser
        - amount
        - requestedAt
        - id
      properties:
        requestedAt:
          type: string
          format: date-time
          example: 2023-07-21T12:45:04.750174
        processedAt:
          type: string
          format: date-time
          example: 2023-07-21T12:45:04.750174
        status:
          $ref: '#/components/schemas/RewardStatusContract'
        unlockDate:
          type: string
          format: date-time
          example: 2023-07-21T12:45:04.750174
        amount:
          $ref: '#/components/schemas/Money'
        numberOfRewardedContributions:
          type: integer
          example: 11
        rewardedUser:
          $ref: '#/components/schemas/ContributorResponse'
        id:
          $ref: '#/components/schemas/RewardId'
    MyRewardPageItemResponse:
      type: object
      required:
        - requestedAt
        - status
        - numberOfRewardedContributions
        - amount
        - rewardedOnProjectName
        - rewardedOnProjectLogoUrl
        - rewardedUser
        - id
        - projectId
      properties:
        requestedAt:
          type: string
          format: date-time
          example: 2023-07-21T12:45:04.750174
        processedAt:
          type: string
          format: date-time
          example: 2023-07-21T12:45:04.750174
        projectId:
          type: string
          format: uuid
        billingProfileId:
          $ref: '#/components/schemas/BillingProfileId'
        status:
          $ref: '#/components/schemas/RewardStatusContract'
        unlockDate:
          type: string
          format: date-time
          example: 2023-07-21T12:45:04.750174
        amount:
          $ref: '#/components/schemas/Money'
        numberOfRewardedContributions:
          type: integer
          example: 11
        rewardedOnProjectName:
          type: string
          example: Bretzel
        rewardedOnProjectLogoUrl:
          type: string
          example: https://onlydust.xyz/cdn-cgi/image/width=100/https://onlydust-app-images.s3.eu-west-1.amazonaws.com/5003677688814069549.png
        rewardedUser:
          $ref: '#/components/schemas/ContributorResponse'
        id:
          $ref: '#/components/schemas/RewardId'
        networks:
          type: array
          items:
            $ref: '#/components/schemas/NetworkContract'
    RewardType:
      type: string
      enum:
        - ISSUE
        - PULL_REQUEST
        - CODE_REVIEW
    RewardStatusContract:
      enum:
        - PENDING_SIGNUP
        - PENDING_CONTRIBUTOR
        - PENDING_BILLING_PROFILE
        - PENDING_COMPANY
        - PENDING_VERIFICATION
        - GEO_BLOCKED
        - INDIVIDUAL_LIMIT_REACHED
        - PAYOUT_INFO_MISSING
        - LOCKED
        - PENDING_REQUEST
        - PROCESSING
        - COMPLETE

    RewardRequest:
      type: object
      required:
        - amount
        - recipientId
        - currencyId
        - items
      properties:
        recipientId:
          type: integer
          format: int64
          description: Github user id to reward
        amount:
          type: number
          description: Currency amount
        currencyId:
          $ref: '#/components/schemas/CurrencyId'
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/RewardItemRequest'

    RewardItemRequest:
      type: object
      required:
        - type
        - id
        - number
        - repoId
      properties:
        type:
          $ref: '#/components/schemas/RewardType'
        id:
          type: string
        number:
          type: integer
          format: int64
        repoId:
          type: integer
          format: int64

    GithubIssueResponse:
      allOf:
        - $ref: '#/components/schemas/GithubIssueLinkResponse'
        - type: object
          description: |
            Only the project lead can see the GitHub App installation details
          properties:
            githubAppInstallationStatus:
              $ref: '#/components/schemas/GithubOrganizationInstallationStatus'
            githubAppInstallationPermissionsUpdateUrl:
              type: string
              format: uri

    GithubIssuePageItemResponse:
      type: object
      description: Github issue
      required:
        - id
        - number
        - title
        - status
        - createdAt
        - htmlUrl
        - author
        - repository
        - commentCount
        - labels
        - applicants
      properties:
        id:
          $ref: '#/components/schemas/IssueId'
        number:
          type: integer
          format: int64
          description: Issue number
          example: 6
        title:
          type: string
          description: Issue or pull request title on Github
        status:
          $ref: '#/components/schemas/GithubIssueStatus'
        createdAt:
          type: string
          format: date-time
          description: When the issue was created.
        closedAt:
          type: string
          format: date-time
          description: When the issue was cancelled or closed.
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the issue.
        body:
          type: string
          description: The body of the issue.
        author:
          $ref: '#/components/schemas/ContributorResponse'
        repository:
          $ref: '#/components/schemas/GithubRepoLinkResponse'
        commentCount:
          type: integer
        labels:
          type: array
          description: The list of labels assigned to this issue
          items:
            $ref: '#/components/schemas/GithubLabel'
        applicants:
          type: array
          description: The list of applicants for this issue
          items:
            $ref: '#/components/schemas/GithubUserResponse'
        currentUserApplication:
          $ref: '#/components/schemas/ProjectApplicationShortResponse'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageResponse'

    GithubIssueLinkResponse:
      type: object
      description: Github issue link response
      required:
        - id
        - number
        - title
        - status
        - htmlUrl
      properties:
        id:
          $ref: '#/components/schemas/IssueId'
        number:
          type: integer
          format: int64
          description: Issue number
          example: 6
        title:
          type: string
          description: Issue or pull request title on Github
        status:
          $ref: '#/components/schemas/GithubIssueStatus'
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the issue.

    GithubLabel:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string

    ContributionType:
      type: string
      enum:
        - ISSUE
        - PULL_REQUEST
        - CODE_REVIEW

    ContributionSort:
      type: string
      default: LAST_UPDATED_AT
      enum:
        - LAST_UPDATED_AT
        - PROJECT_REPO_NAME
        - GITHUB_NUMBER_TITLE
        - LINKS_COUNT

    ProjectContributionSort:
      type: string
      default: LAST_UPDATED_AT
      enum:
        - LAST_UPDATED_AT
        - REPO_NAME
        - CONTRIBUTOR_LOGIN
        - GITHUB_NUMBER_TITLE
        - LINKS_COUNT

    GithubIssueStatus:
      type: string
      enum:
        - OPEN
        - COMPLETED
        - CANCELLED

    GithubCodeReviewState:
      type: string
      enum:
        - PENDING
        - COMMENTED
        - APPROVED
        - CHANGES_REQUESTED
        - DISMISSED

    ContributionStatus:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED

    GithubStatus:
      type: string
      enum:
        - OPEN
        - COMPLETED
        - CANCELLED
        - CLOSED
        - MERGED
        - DRAFT
        - PENDING
        - COMMENTED
        - APPROVED
        - CHANGES_REQUESTED
        - DISMISSED

    GithubPullRequestReviewState:
      type: string
      enum:
        - PENDING_REVIEWER
        - UNDER_REVIEW
        - APPROVED
        - CHANGES_REQUESTED

    ShortCurrencyResponse:
      type: object
      description: Minimal information about a currency
      required:
        - id
        - code
        - name
        - decimals
      properties:
        id:
          $ref: '#/components/schemas/CurrencyId'
        code:
          type: string
          example: USDC
        name:
          type: string
          example: USD Coin
        logoUrl:
          type: string
          format: uri
        decimals:
          type: integer

    ContributionPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - contributions
          properties:
            contributions:
              type: array
              items:
                $ref: '#/components/schemas/ContributionPageItemResponse'

    ProjectListResponse:
      type: object
      required:
        - projects
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectShortResponse'

    ContributedReposResponse:
      type: object
      required:
        - repos
      properties:
        repos:
          type: array
          items:
            $ref: '#/components/schemas/ShortGithubRepoResponse'

    ContributionPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/ContributionResponse'
        - type: object
          required:
            - id
            - createdAt
            - lastUpdatedAt
            - status
            - rewardIds
            - project
            - contributor
            - links
          properties:
            id:
              type: string
              description: The contribution ID is determined from its content's ID (ie PR / issue / code review ID)
            createdAt:
              type: string
              format: date-time
              description: When the contribution was created
            completedAt:
              type: string
              format: date-time
              description: When the contribution was completed
            lastUpdatedAt:
              type: string
              format: date-time
              description: When the contribution was last updated
            status:
              $ref: '#/components/schemas/ContributionStatus'
            githubPullRequestReviewState:
              $ref: '#/components/schemas/GithubPullRequestReviewState'
            rewardIds:
              type: array
              description: Rewards granted for this contribution
              items:
                $ref: '#/components/schemas/RewardId'
            project:
              $ref: '#/components/schemas/ProjectShortResponse'
            contributor:
              $ref: '#/components/schemas/ContributorResponse'
            links:
              type: array
              description: Related contributions
              items:
                $ref: '#/components/schemas/ContributionLinkResponse'

    ContributionLinkResponse:
      allOf:
        - $ref: '#/components/schemas/ContributionResponse'
        - type: object
          required:
            - is_mine
          properties:
            is_mine:
              type: boolean
              description: True if the contribution is made by the same user

    ContributionResponse:
      type: object
      required:
        - type
        - repo
        - githubStatus
        - githubNumber
        - githubAuthor
        - githubTitle
        - githubHtmlUrl
      properties:
        type:
          $ref: '#/components/schemas/ContributionType'
        repo:
          $ref: '#/components/schemas/ShortGithubRepoResponse'
        githubAuthor:
          $ref: '#/components/schemas/GithubUserResponse'
        githubNumber:
          type: integer
          format: int64
          description: Github item number
          example: 6
        githubStatus:
          $ref: '#/components/schemas/GithubStatus'
        githubTitle:
          type: string
          description: Github item title
        githubHtmlUrl:
          type: string
          format: url
          description: The public Github URL of the contribution.
        githubBody:
          type: string
          description: The body of the contribution.
        githubCodeReviewOutcome:
          $ref: '#/components/schemas/GithubCodeReviewState'

    ContributionDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/ContributionResponse'
        - type: object
          required:
            - id
            - contributor
            - createdAt
            - status
            - project
            - repo
            - commentsCount
            - links
            - rewards
          properties:
            id:
              type: string
              description: The contribution ID is determined from its content's ID (ie PR / issue / code review ID)
            contributor:
              $ref: '#/components/schemas/ContributorResponse'
            createdAt:
              type: string
              format: date-time
              description: When the contribution was created
            completedAt:
              type: string
              format: date-time
              description: When the contribution was completed
            status:
              $ref: '#/components/schemas/ContributionStatus'
            project:
              $ref: '#/components/schemas/ProjectShortResponse'
            repo:
              $ref: '#/components/schemas/ShortGithubRepoResponse'
            commentsCount:
              type: integer
              description: Number of comments on the contribution
            commitsCount:
              type: integer
            userCommitsCount:
              type: integer
            links:
              type: array
              description: Related contributions
              items:
                $ref: '#/components/schemas/ContributionLinkResponse'
            githubPullRequestReviewState:
              $ref: '#/components/schemas/GithubPullRequestReviewState'
            rewards:
              type: array
              description: Rewards granted for this contribution
              items:
                $ref: '#/components/schemas/RewardResponse'

    GetMeResponse:
      allOf:
        - $ref: '#/components/schemas/RegisteredUserResponse'
        - type: object
          required:
            - hasSeenOnboardingWizard
            - hasAcceptedLatestTermsAndConditions
            - isAdmin
            - createdAt
            - hasPendingApplications
          properties:
            hasSeenOnboardingWizard:
              type: boolean
              description: True if the user has seen the onboarding process
            hasAcceptedLatestTermsAndConditions:
              type: boolean
              description: True if the user has accepted the latest version of terms and conditions
            isAuthorizedToApplyOnGithubIssues:
              type: boolean
              description: True if the user is authorized to apply on Github issues
            projectsLed:
              type: array
              items:
                $ref: '#/components/schemas/ProjectLinkResponse'
            pendingProjectsLed:
              type: array
              items:
                $ref: '#/components/schemas/ProjectLinkResponse'
            pendingApplications:
              type: array
              items:
                $ref: '#/components/schemas/ProjectApplicationShortResponse'
            isAdmin:
              type: boolean
              description: True if the user is an OnlyDust admin
            createdAt:
              type: string
              format: date-time
            email:
              type: string
              format: email
              description: User email
            missingPayoutPreference:
              type: boolean
              description: True if the user has not selected any billing profile for a project on which he has pending rewards.
            firstName:
              type: string
            lastName:
              type: string
            sponsors:
              type: array
              items:
                $ref: '#/components/schemas/SponsorResponse'

    BillingProfileType:
      type: string
      enum:
        - INDIVIDUAL
        - COMPANY
        - SELF_EMPLOYED
    BillingProfileTypeRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/BillingProfileType'

    BillingProfileEnableRequest:
      type: object
      required:
        - enable
      properties:
        enable:
          type: boolean

    UpdateCoworkerRoleRequest:
      type: object
      required:
        - role
      properties:
        role:
          $ref: '#/components/schemas/BillingProfileCoworkerRole'

    MyBillingProfilesResponse:
      type: object
      properties:
        billingProfiles:
          type: array
          items:
            $ref: '#/components/schemas/ShortBillingProfileResponse'
    ShortBillingProfileResponse:
      type: object
      required:
        - id
        - name
        - type
        - invoiceMandateAccepted
        - missingPayoutInfo
        - missingVerification
        - verificationBlocked
        - rewardCount
        - invoiceableRewardCount
        - requestableRewardCount
        - enabled
        - role
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/BillingProfileType'
        name:
          type: string
        rewardCount:
          type: integer
        invoiceableRewardCount:
          type: integer
          description: Number of rewards that are pending invoice
        requestableRewardCount:
          type: integer
          description: Like invoiceableRewardCount, except that it only counts rewards that can be requested by the caller
        invoiceMandateAccepted:
          type: boolean
        enabled:
          type: boolean
        pendingInvitationResponse:
          type: boolean
        role:
          $ref: '#/components/schemas/BillingProfileCoworkerRole'
        missingPayoutInfo:
          type: boolean
          description: True if any reward that is included in an invoice in this billing profile
            requires some payout info to be set in order to be payable.
            Always false when no pending rewards.
        missingVerification:
          type: boolean
          description: True if there is any reward belonging to this billing profile and its status is not VERIFIED.
            Always false when no pending rewards.
        verificationBlocked:
          type: boolean
          description: True if the billing profile verification process is blocked.
        individualLimitReached:
          type: boolean
          description: True if the (individual) billing profile has reached the yearly limit.

    PatchMeContract:
      type: object
      properties:
        hasSeenOnboardingWizard:
          type: boolean
          description: True if the the onboarding process was displayed to the user
        hasAcceptedTermsAndConditions:
          type: boolean
          description: True if the user has accepted the latest version of terms and conditions

    ProjectApplicationCreateRequest:
      type: object
      required:
        - projectId
        - issueId
        - motivation
      properties:
        projectId:
          $ref: '#/components/schemas/ProjectId'
        issueId:
          $ref: '#/components/schemas/IssueId'
        motivation:
          type: string
          description: The applicant's motivation to work on the issue
        problemSolvingApproach:
          type: string
          description: The applicant's approach to solving the issue

    ProjectApplicationUpdateRequest:
      type: object
      required:
        - motivation
      properties:
        motivation:
          type: string
          description: The applicant's motivation to work on the issue
        problemSolvingApproach:
          type: string
          description: The applicant's approach to solving the issue

    ProjectApplicationCreateResponse:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/ProjectApplicationId'

    ProjectApplicationPageSort:
      type: string
      default: RECOMMANDATION_SCORE
      enum:
        - RECOMMANDATION_SCORE
        - LOGIN

    ProjectApplicationPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - applications
          properties:
            applications:
              type: array
              items:
                $ref: '#/components/schemas/ProjectApplicationPageItemResponse'

    ScorePercentage:
      type: integer
      minimum: 0
      maximum: 100
      description: A score between 0 and 100. The higher, the better.

    ProjectApplicationPageItemResponse:
      type: object
      required:
        - id
        - projectId
        - issue
        - applicant
        - recommendationScore
      properties:
        id:
          $ref: '#/components/schemas/ProjectApplicationId'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        issue:
          $ref: '#/components/schemas/GithubIssueLinkResponse'
        applicant:
          $ref: '#/components/schemas/ContributorResponse'
        recommendationScore:
          $ref: '#/components/schemas/ScorePercentage'

    ProjectApplicationResponse:
      type: object
      required:
        - id
        - projectId
        - issue
        - applicant
        - origin
        - recommendationScore
        - availabilityScore
        - appliedDistinctProjectCount
        - pendingApplicationCountOnOtherProjects
        - pendingApplicationCountOnThisProject
        - motivation
      properties:
        id:
          $ref: '#/components/schemas/ProjectApplicationId'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        issue:
          $ref: '#/components/schemas/GithubIssueLinkResponse'
        applicant:
          $ref: '#/components/schemas/ContributorResponse'
        origin:
          $ref: '#/components/schemas/ProjectApplicationOrigin'
        recommendationScore:
          $ref: '#/components/schemas/ScorePercentage'
        availabilityScore:
          $ref: '#/components/schemas/ScorePercentage'
        languageScore:
          $ref: '#/components/schemas/ScorePercentage'
        fidelityScore:
          $ref: '#/components/schemas/ScorePercentage'
        appliedDistinctProjectCount:
          type: integer
          description: Number of distinct projects the applicant has applied to.
        pendingApplicationCountOnOtherProjects:
          type: integer
          description: Number of pending applications the applicant has on other projects.
        pendingApplicationCountOnThisProject:
          type: integer
          description: Number of pending applications the applicant has on this project.
        motivation:
          type: string
          description: The applicant's motivation to work on the issue
        problemSolvingApproach:
          type: string
          description: The applicant's approach to solving the issue

    ProjectApplicationShortResponse:
      type: object
      required:
        - id
        - applicant
        - project
        - motivations
      properties:
        id:
          $ref: '#/components/schemas/ProjectApplicationId'
        applicant:
          $ref: '#/components/schemas/ContributorResponse'
        project:
          $ref: '#/components/schemas/ProjectLinkResponse'
        motivations:
          type: string
          description: The applicant's motivation to work on the issue
        problemSolvingApproach:
          type: string
          description: The applicant's approach to solving the issue

    CreateProjectRequest:
      type: object
      required:
        - name
        - shortDescription
        - longDescription
        - isLookingForContributors
        - inviteGithubUserIdsAsProjectLeads
        - githubRepoIds
      properties:
        name:
          type: string
        shortDescription:
          type: string
        longDescription:
          type: string
        moreInfos:
          type: array
          items:
            $ref: '#/components/schemas/SimpleLink'
        isLookingForContributors:
          type: boolean
        inviteGithubUserIdsAsProjectLeads:
          type: array
          items:
            $ref: '#/components/schemas/GithubUserId'
        githubRepoIds:
          type: array
          items:
            $ref: '#/components/schemas/GithubRepoId'
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
        ecosystemIds:
          type: array
          items:
            $ref: '#/components/schemas/EcosystemId'
        categoryIds:
          type: array
          description: List of categories to link the project on.
          items:
            $ref: '#/components/schemas/ProjectCategoryId'

    UpdateProjectIgnoredContributionsRequest:
      type: object
      properties:
        contributionsToIgnore:
          type: array
          items:
            $ref: '#/components/schemas/ContributionId'
        contributionsToUnignore:
          type: array
          items:
            $ref: '#/components/schemas/ContributionId'

    UpdateProjectRequest:
      type: object
      required:
        - name
        - shortDescription
        - longDescription
        - moreInfo
        - isLookingForContributors
      properties:
        name:
          type: string
        shortDescription:
          type: string
        longDescription:
          type: string
        moreInfos:
          type: array
          items:
            $ref: '#/components/schemas/SimpleLink'
        isLookingForContributors:
          type: boolean
        inviteGithubUserIdsAsProjectLeads:
          type: array
          description: List of Github user ids to invite as project leads.
            All other project lead invitations will be removed.
            If empty, all project lead invitations will be removed.
            If null, no change will be made.
            It is allowed to add a new project lead invitation directly through this list.
          items:
            $ref: '#/components/schemas/GithubUserId'
        projectLeadsToKeep:
          type: array
          description: List of project leads to keep.
            All other project leads will be removed.
            If empty, all project leads will be removed.
            If null, no change will be made.
            It is not allowed to add a new project lead directly through this list, as they must be invited first.
          items:
            $ref: '#/components/schemas/UserId'
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
        rewardSettings:
          $ref: '#/components/schemas/ProjectRewardSettings'
        githubRepoIds:
          type: array
          description: List of Github repos to include in the project.
            All other repos will be unlinked from the project.
            If empty, all repos will be unlinked from the project.
            If null, no change will be made.
            It is allowed to link a new repo directly through this list.
          items:
            $ref: '#/components/schemas/GithubRepoId'
        ecosystemIds:
          type: array
          description: List of Ecosystem to link the project on.
            All other ecosystem will be unlinked from the project.
            If empty, all ecosystem will be unlinked from the project.
            If null, no change will be made.
            It is allowed to link a new ecosystem directly through this list.
          items:
            $ref: '#/components/schemas/EcosystemId'
        categoryIds:
          type: array
          description: List of categories to link the project on.
            All other categories will be unlinked from the project.
            If empty, all categories will be unlinked from the project.
            If null, no change will be made.
            It is allowed to link a new category directly through this list.
          items:
            $ref: '#/components/schemas/ProjectCategoryId'

    ProjectCategoriesResponse:
      type: object
      required:
        - categories
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ProjectCategoryResponse'

    ProjectCategoryResponse:
      type: object
      required:
        - id
        - slug
        - name
        - iconSlug
      properties:
        id:
          $ref: '#/components/schemas/ProjectCategoryId'
        slug:
          $ref: '#/components/schemas/ProjectCategorySlug'
        name:
          type: string
        iconSlug:
          type: string

    ProjectRewardSettings:
      type: object
      properties:
        ignorePullRequests:
          type: boolean
          description: Ignore pull requests by default
        ignoreIssues:
          type: boolean
          description: Ignore issues by default
        ignoreCodeReviews:
          type: boolean
          description: Ignore code reviews by default
        ignoreContributionsBefore:
          type: string
          format: date-time
          description: Ignore contributions before this date by default

    CreateProjectResponse:
      type: object
      required:
        - projectId
        - projectSlug
      properties:
        projectId:
          type: string
          format: uuid
        projectSlug:
          type: string

    UpdateProjectResponse:
      type: object
      required:
        - projectId
        - projectSlug
      properties:
        projectId:
          type: string
          format: uuid
        projectSlug:
          type: string

    SimpleLink:
      type: object
      required:
        - url
      properties:
        url:
          type: string
        value:
          type: string
    GithubUserListResponse:
      type: array
      items:
        $ref: '#/components/schemas/ContributorResponse'

    UploadImageResponse:
      type: object
      properties:
        url:
          type: string
          format: url
          description: The direct URL to the uploaded image
      example:
        url: https://onlydust-app-images.s3.eu-west-1.amazonaws.com/4137005338789730434.png

    ProjectBudgetsResponse:
      type: object
      required:
        - budgets
      properties:
        initialDollarsEquivalent:
          type: number
        remainingDollarsEquivalent:
          type: number
        budgets:
          type: array
          items:
            $ref: '#/components/schemas/BudgetResponse'

    BudgetResponse:
      type: object
      required:
        - currency
        - initialAmount
        - remaining
      properties:
        currency:
          $ref: '#/components/schemas/ShortCurrencyResponse'
        initialAmount:
          type: number
        remaining:
          type: number
        remainingDollarsEquivalent:
          type: number
        initialDollarsEquivalent:
          type: number
        dollarsConversionRate:
          type: number

    RewardTotalAmountsResponse:
      type: object
      properties:
        totalAmount:
          type: number
        details:
          type: array
          items:
            $ref: '#/components/schemas/Money'

    RewardResponse:
      type: object
      required:
        - status
        - amount
        - from
        - to
        - createdAt
        - id
      properties:
        id:
          type: string
          format: uuid
        amount:
          $ref: '#/components/schemas/Money'
        status:
          $ref: '#/components/schemas/RewardStatusContract'
        unlockDate:
          type: string
          format: date-time
        from:
          $ref: '#/components/schemas/ContributorResponse'
        to:
          $ref: '#/components/schemas/ContributorResponse'
        createdAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time

    RewardDetailsResponse:
      allOf:
        - $ref: '#/components/schemas/RewardResponse'
        - type: object
          required:
            - project
            - receipt
          properties:
            billingProfileId:
              $ref: '#/components/schemas/BillingProfileId'
            project:
              $ref: '#/components/schemas/ProjectShortResponse'
            receipt:
              $ref: '#/components/schemas/ReceiptResponse'

    RewardItemsPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - rewardItems
          properties:
            rewardItems:
              type: array
              items:
                $ref: '#/components/schemas/RewardItemResponse'

    RewardItemResponse:
      type: object
      required:
        - title
        - githubUrl
        - createdAt
        - repoName
        - type
        - status
        - number
        - id
      properties:
        number:
          type: integer
          format: int64
        id:
          type: string
        contributionId:
          type: string
          description: Id of the contribution (if any) related to this reward item.
        title:
          type: string
        githubUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        repoName:
          type: string
        type:
          $ref: '#/components/schemas/ContributionType'
        commitsCount:
          type: integer
        userCommitsCount:
          type: integer
        commentsCount:
          type: integer
        status:
          $ref: '#/components/schemas/GithubStatus'
        githubAuthorId:
          type: integer
          format: int64
        authorLogin:
          type: string
        authorAvatarUrl:
          type: string
        authorGithubUrl:
          type: string
        githubBody:
          type: string
          description: The body of the contribution.

    RewardableItemsPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - rewardableItems
          properties:
            rewardableItems:
              type: array
              items:
                $ref: '#/components/schemas/RewardableItemResponse'

    AllRewardableItemsResponse:
      type: object
      required:
        - rewardableIssues
        - rewardablePullRequests
        - rewardableCodeReviews
      properties:
        rewardableIssues:
          type: array
          items:
            $ref: '#/components/schemas/RewardableItemResponse'
        rewardablePullRequests:
          type: array
          items:
            $ref: '#/components/schemas/RewardableItemResponse'
        rewardableCodeReviews:
          type: array
          items:
            $ref: '#/components/schemas/RewardableItemResponse'

    RewardableItemResponse:
      type: object
      required:
        - title
        - createdAt
        - repoName
        - repoId
        - type
        - status
        - number
        - id
        - ignored
        - htmlUrl
      properties:
        number:
          type: integer
          format: int64
          description: Either the issue number, the pull request number or the code review's pull request number
        id:
          type: string
          description: Either the issue id, the pull request id or the code review id
        contributionId:
          type: string
          description: Id of the contribution (if any) related to this rewardable item.
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        githubBody:
          type: string
          description: The body of the contribution.
        author:
          $ref: '#/components/schemas/GithubUserResponse'
        repoName:
          type: string
        repoId:
          $ref: '#/components/schemas/GithubRepoId'
        type:
          $ref: '#/components/schemas/ContributionType'
        commitsCount:
          type: integer
        userCommitsCount:
          type: integer
        commentsCount:
          type: integer
        status:
          $ref: '#/components/schemas/GithubStatus'
        ignored:
          type: boolean
          description: True if the contribution is ignored in the project
        htmlUrl:
          type: string

    ReceiptType:
      type: string
      enum:
        - CRYPTO
        - FIAT

    ReceiptResponse:
      type: object
      required:
        - type
        - transactionReference
      properties:
        type:
          $ref: '#/components/schemas/ReceiptType'
        iban:
          type: string
        walletAddress:
          type: string
        ens:
          type: string
        transactionReference:
          type: string
        transactionReferenceLink:
          type: string
          format: uri

    OnContributionsChangeEvent:
      type: object
      required:
        - repoIds
      properties:
        repoIds:
          type: array
          description: List of Github repos on which contributions have changed
          items:
            $ref: '#/components/schemas/GithubRepoId'

    AddOtherWorkRequest:
      type: object
      required:
        - githubRepoId
        - title
        - description
      properties:
        githubRepoId:
          $ref: '#/components/schemas/GithubRepoId'
        title:
          type: string
        description:
          type: string

    AddOtherIssueRequest:
      type: object
      required:
        - githubIssueHtmlUrl
      properties:
        githubIssueHtmlUrl:
          type: string
          format: url

    AddOtherPullRequestRequest:
      type: object
      required:
        - githubIssueHtmlUrl
      properties:
        githubPullRequestHtmlUrl:
          type: string
          format: url

    ContributorCardHeaderResponse:
      allOf:
        - $ref: '#/components/schemas/ContributorResponse'
        - type: object
          properties:
            cover:
              $ref: '#/components/schemas/UserProfileCoverColor'

    ProjectNewcomersPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - contributors
          properties:
            contributors:
              type: array
              items:
                $ref: '#/components/schemas/ProjectNewcomersPageItemResponse'

    ProjectNewcomersPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/ContributorCardHeaderResponse'
        - type: object
          properties:
            location:
              type: string
              description: User location as in Github profile
              example: Paris, France
            bio:
              type: string
              description: User bio as in Github profile
              example: Contributing to awesome open source projects.
            firstContributedAt:
              type: string
              format: date-time
              description: First contribution date to return if user not registered on OD

    ProjectChurnedContributorsPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - contributors
          properties:
            contributors:
              type: array
              items:
                $ref: '#/components/schemas/ProjectChurnedContributorsPageItemResponse'

    ProjectChurnedContributorsPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/ContributorCardHeaderResponse'
        - type: object
          required:
            - lastContribution
          properties:
            lastContribution:
              type: object
              required:
                - id
                - completedAt
                - project
              properties:
                id:
                  $ref: '#/components/schemas/ContributionId'
                completedAt:
                  type: string
                  format: date-time
                repo:
                  $ref: '#/components/schemas/ShortGithubRepoResponse'

    ProjectContributorActivityPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - contributors
          properties:
            contributors:
              type: array
              items:
                $ref: '#/components/schemas/ProjectContributorActivityPageItemResponse'

    ProjectContributorActivityPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/ContributorResponse'
        - type: object
          properties:
            completedPullRequestCount:
              type: integer
            completedIssueCount:
              type: integer
            completedCodeReviewCount:
              type: integer
            contributionCountPerWeeks:
              type: array
              items:
                $ref: '#/components/schemas/UserContributionStats'

    ProjectTag:
      type: string
      enum:
        - HOT_COMMUNITY
        - NEWBIES_WELCOME
        - LIKELY_TO_REWARD
        - WORK_IN_PROGRESS
        - FAST_AND_FURIOUS
        - BIG_WHALE
        - UPDATED_ROADMAP

    VerificationStatus:
      type: string
      enum:
        - NOT_STARTED
        - STARTED
        - UNDER_REVIEW
        - VERIFIED
        - REJECTED
        - CLOSED

    BillingProfileResponse:
      type: object
      required:
        - id
        - status
        - type
        - name
        - me
        - enabled
        - invoiceMandateAccepted
        - missingPayoutInfo
        - missingVerification
        - verificationBlocked
      properties:
        id:
          $ref: '#/components/schemas/BillingProfileId'
        type:
          $ref: '#/components/schemas/BillingProfileType'
        status:
          $ref: '#/components/schemas/VerificationStatus'
        name:
          type: string
        currentYearPaymentLimit:
          type: number
          description: The payment limit for the current year (typically, $5000 for individuals)
        currentYearPaymentAmount:
          type: number
          description: The total payments amount for the current year so far.
        individualLimitReached:
          type: boolean
          description: True if the (individual) billing profile has reached the yearly limit.
        isSwitchableToSelfEmployed:
          type: boolean
          description: True if the billing profile can be switched from company to self-employed type (eg. no other coworkers)
        enabled:
          type: boolean
        invoiceMandateAccepted:
          type: boolean
        rewardCount:
          type: integer
        invoiceableRewardCount:
          type: integer
        missingPayoutInfo:
          type: boolean
          description: True if any reward that is included in an invoice in this billing profile
            requires some payout info to be set in order to be payable.
            Always false when no pending rewards.
        missingVerification:
          type: boolean
          description: True if there is any reward belonging to this billing profile and its status is not VERIFIED.
            Always false when no pending rewards.
        verificationBlocked:
          type: boolean
          description: True if the billing profile verification process is blocked.
        me:
          type: object
          required:
            - canDelete
            - canLeave
          properties:
            invitation:
              $ref: '#/components/schemas/BillingProfileCoworkerInvitation'
            role:
              $ref: '#/components/schemas/BillingProfileCoworkerRole'
            canDelete:
              type: boolean
              description: True if the billing profile can be deleted by the caller (eg. no invoice linked to it so far and the caller is admin)
            canLeave:
              type: boolean
              description: True if the caller can leave the billing profile (eg. no invoice linked to it so far and caller is not the last admin)
        kyc:
          $ref: '#/components/schemas/KYCResponse'
        kyb:
          $ref: '#/components/schemas/KYBResponse'

    KYCResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
          format: date-time
        address:
          type: string
        country:
          type: string
        usCitizen:
          type: boolean
        idDocumentType:
          type: string
          enum:
            - PASSPORT
            - ID_CARD
            - RESIDENCE_PERMIT
            - DRIVER_LICENSE
        idDocumentNumber:
          type: string
        validUntil:
          type: string
          format: date-time
        idDocumentCountryCode:
          type: string

    KYBResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        registrationNumber:
          type: string
        registrationDate:
          type: string
          format: date-time
        address:
          type: string
        country:
          type: string
        usEntity:
          type: boolean
        subjectToEuropeVAT:
          type: boolean
        euVATNumber:
          type: string

    BillingProfileRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/BillingProfileType'
        selectForProjects:
          type: array
          description: List of project ids on which the billing profile will be selected for the caller
          items:
            $ref: '#/components/schemas/ProjectId'

    BillingProfileCoworkerRole:
      type: string
      enum:
        - ADMIN
        - MEMBER

    BillingProfileCoworkerInvitation:
      type: object
      properties:
        invitedBy:
          $ref: '#/components/schemas/ContributorResponse'
        invitedAt:
          type: string
          format: date-time
        role:
          $ref: '#/components/schemas/BillingProfileCoworkerRole'

    BillingProfileCoworkerInvitationRequest:
      type: object
      required:
        - githubUserId
        - role
      properties:
        githubUserId:
          $ref: '#/components/schemas/GithubUserId'
        role:
          $ref: '#/components/schemas/BillingProfileCoworkerRole'

    BillingProfileCoworkerInvitationUpdateRequest:
      type: object
      required:
        - accepted
      properties:
        accepted:
          type: boolean
          description: True if the invitation is accepted

    BillingProfileCoworkersPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - coworkers
          properties:
            coworkers:
              type: array
              items:
                $ref: '#/components/schemas/BillingProfileCoworkersPageItemResponse'

    BillingProfileCoworkersPageItemResponse:
      type: object
      required:
        - role
        - invitedAt
      allOf:
        - $ref: '#/components/schemas/ContributorResponse'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/UserId'
            role:
              $ref: '#/components/schemas/BillingProfileCoworkerRole'
            joinedAt:
              type: string
              format: date-time
              description: Date when the coworker joined the billing profile. Null if the coworker didn't accept the invitation yet.
            invitedAt:
              type: string
              format: date-time
            removable:
              type: boolean
              description: True if the coworker can be removed from the billing profile

    PayoutPreferenceRequest:
      type: object
      required:
        - projectId
        - billingProfileId
      properties:
        projectId:
          $ref: '#/components/schemas/ProjectId'
        billingProfileId:
          $ref: '#/components/schemas/BillingProfileId'

    PayoutPreferencesPageResponse:
      type: array
      items:
        $ref: '#/components/schemas/PayoutPreferencesItemResponse'

    PayoutPreferencesItemResponse:
      type: object
      required:
        - project
      properties:
        project:
          $ref: '#/components/schemas/ProjectShortResponse'
        billingProfile:
          $ref: '#/components/schemas/ShortBillingProfileResponse'

    BillingProfileInvoiceableRewardsResponse:
      type: object
      required:
        - rewards
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/MyRewardPageItemResponse'

    InvoicePreviewResponse:
      type: object
      required:
        - id
        - number
        - createdAt
        - dueAt
        - destinationAccounts
        - billingProfileType
        - usdToEurConversionRate
      properties:
        id:
          type: string
          format: uuid
        number:
          type: string
        createdAt:
          type: string
          format: date-time
        dueAt:
          type: string
          format: date-time
          description: 10 days after creation date
        billingProfileType:
          $ref: '#/components/schemas/BillingProfileType'
        individualBillingProfile:
          type: object
          required:
            - firstName
            - lastName
            - address
            - countryCode
          properties:
            firstName:
              type: string
            lastName:
              type: string
            address:
              type: string
            country:
              deprecated: true
              type: string
            countryCode:
              type: string
              format: iso-country-code
        companyBillingProfile:
          type: object
          required:
            - registrationNumber
            - name
            - address
            - vatRegulationState
            - countryCode
          properties:
            registrationNumber:
              type: string
            name:
              type: string
            address:
              type: string
            vatRegulationState:
              $ref: '#/components/schemas/VatRegulationState'
            euVATNumber:
              type: string
            country:
              deprecated: true
              type: string
            countryCode:
              type: string
              format: iso-country-code
        destinationAccounts:
          $ref: '#/components/schemas/DestinationAccountResponse'
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceRewardItemResponse'
        totalBeforeTax:
          $ref: '#/components/schemas/NewMoney'
        taxRate:
          type: number
          description: |
            Tax rate in percentage.
            If the vatRegulationState is VAT_APPLICABLE, the tax rate is 20%, otherwise 0.
        totalTax:
          $ref: '#/components/schemas/NewMoney'
        totalAfterTax:
          $ref: '#/components/schemas/NewMoney'
        usdToEurConversionRate:
          type: number
          description: The conversion rate from USD to EUR
        totalAfterTaxPerCurrency:
          type: array
          items:
            $ref: '#/components/schemas/NewMoney'

    NewMoney: # TODO: rename when legacy 'Money' type is removed
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
        currency:
          $ref: '#/components/schemas/ShortCurrencyResponse'

    BaseMoney:
      allOf:
        - $ref: '#/components/schemas/NewMoney'
        - type: object
          required:
            - conversionRate
          properties:
            conversionRate:
              type: number

    ConvertibleMoney:
      allOf:
        - $ref: '#/components/schemas/NewMoney'
        - type: object
          required:
            - target
            - prettyAmount
          properties:
            prettyAmount:
              type: number
            target:
              $ref: '#/components/schemas/BaseMoney'

    InvoiceRewardItemResponse:
      type: object
      required:
        - id
        - date
        - projectName
        - amount
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
        projectName:
          type: string
        amount:
          $ref: '#/components/schemas/ConvertibleMoney'

    DestinationAccountResponse:
      type: object
      properties:
        bankAccount:
          $ref: '#/components/schemas/BankAccountResponse'
        wallets:
          type: array
          items:
            $ref: '#/components/schemas/WalletResponse'

    BankAccountResponse:
      type: object
      properties:
        accountNumber:
          type: string
        bic:
          type: string

    WalletResponse:
      type: object
      properties:
        address:
          type: string
        network:
          type: string

    NetworkContract:
      type: string
      enum:
        - SEPA
        - ETHEREUM
        - OPTIMISM
        - APTOS
        - STARKNET

    VatRegulationState:
      type: string
      enum:
        - VAT_APPLICABLE
        - VAT_NOT_APPLICABLE_NON_UE
        - VAT_NOT_APPLICABLE_FRENCH_NOT_SUBJECT
        - VAT_REVERSE_CHARGE

    BillingProfileInvoicesPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - invoices
          properties:
            invoices:
              type: array
              items:
                $ref: '#/components/schemas/BillingProfileInvoicesPageItemResponse'

    BillingProfileInvoicesPageItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        number:
          type: string
        createdAt:
          type: string
          format: date-time
        totalAfterTax:
          $ref: '#/components/schemas/NewMoney'
        status:
          $ref: '#/components/schemas/InvoiceStatus'

    InvoiceStatus:
      type: string
      enum:
        - DRAFT
        - PROCESSING
        - REJECTED
        - COMPLETE

    EcosystemPage:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - ecosystems
          properties:
            ecosystems:
              type: array
              items:
                $ref: '#/components/schemas/EcosystemResponse'

    EcosystemPageV2:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - ecosystems
          properties:
            ecosystems:
              type: array
              items:
                $ref: '#/components/schemas/EcosystemPageItemResponse'

    EcosystemContributorsPage:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - contributors
          properties:
            contributors:
              type: array
              items:
                $ref: '#/components/schemas/EcosystemContributorsPageItemResponse'

    EcosystemContributorsPageItemResponse:
      allOf:
        - $ref: '#/components/schemas/GithubUserResponse'
        - type: object
          required:
            - dynamicRank
            - globalRank
            - globalRankCategory
            - contributionCount
            - rewardCount
            - totalEarnedUsd
          properties:
            dynamicRank:
              type: integer
              description: |
                Rank of the contributor in the ecosystem, depending on sorting parameters.
                This is NOT the same as the global OnlyDust rank.
              example: 1
            globalRank:
              type: integer
              description: User rank on OnlyDust (the lower, the better)
              example: 42
            globalRankCategory:
              $ref: '#/components/schemas/UserRankCategory'
            contributionCount:
              type: integer
              description: Total number of contributions the contributor made on this ecosystem.
              example: 22
            rewardCount:
              type: integer
              description: Total number of rewards the contributor got on this ecosystem.
              example: 10
            totalEarnedUsd:
              type: number
              description: Total amount earned by the contributor in USD on this ecosystem.

    InvoiceMandateRequest:
      type: object
      required:
        - hasAcceptedInvoiceMandate
      properties:
        hasAcceptedInvoiceMandate:
          type: boolean

    ProjectWithBudgetResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectLinkResponse'
        - type: object
          required:
            - totalUsdBudget
            - remainingBudgets
          properties:
            totalUsdBudget:
              type: number
            remainingBudgets:
              type: array
              items:
                $ref: '#/components/schemas/Money'

    TransactionHistoryPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - transactions
          properties:
            transactions:
              type: array
              items:
                $ref: '#/components/schemas/TransactionHistoryPageItemResponse'

    TransactionHistoryPageItemResponse:
      type: object
      required:
        - date
        - type
        - amount
        - currency
      properties:
        id:
          $ref: '#/components/schemas/TransactionId'
        date:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/SponsorAccountTransactionType'
        project:
          $ref: '#/components/schemas/ProjectLinkResponse'
        amount:
          $ref: '#/components/schemas/Money'

    SponsorAccountTransactionType:
      type: string
      enum:
        - DEPOSIT
        - WITHDRAWAL
        - ALLOCATION
        - UNALLOCATION

    AllocateRequest:
      type: object
      required:
        - projectId
        - amount
        - currencyId
      properties:
        projectId:
          $ref: '#/components/schemas/ProjectId'
        amount:
          type: number
        currencyId:
          $ref: '#/components/schemas/CurrencyId'

    HackathonsListItemResponse:
      type: object
      required:
        - slug
        - id
        - title
        - location
        - startDate
        - endDate
        - projects
      properties:
        id:
          $ref: '#/components/schemas/HackathonId'
        slug:
          $ref: '#/components/schemas/HackathonSlug'
        title:
          type: string
        location:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectLinkResponse'

    HackathonsListResponse:
      type: object
      required:
        - hackathons
      properties:
        hackathons:
          type: array
          items:
            $ref: '#/components/schemas/HackathonsListItemResponse'

    HackathonsTrackResponse:
      type: object
      required:
        - name
        - subtitle
        - description
        - iconSlug
        - projects
      properties:
        name:
          type: string
        subtitle:
          type: string
        description:
          type: string
        iconSlug:
          type: string
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectShortResponse'

    HackathonsDetailsResponse:
      type: object
      required:
        - slug
        - id
        - title
        - subtitle
        - description
        - location
        - startDate
        - endDate
        - totalBudget
        - me
        - links
        - sponsors
        - projects
        - tracks
      properties:
        id:
          $ref: '#/components/schemas/HackathonId'
        slug:
          $ref: '#/components/schemas/HackathonSlug'
        title:
          type: string
        subtitle:
          type: string
        description:
          type: string
        location:
          type: string
        totalBudget:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        me:
          type: object
          required:
            - hasRegistered
          properties:
            hasRegistered:
              type: boolean
        links:
          type: array
          items:
            $ref: '#/components/schemas/SimpleLink'
        sponsors:
          type: array
          items:
            $ref: '#/components/schemas/SponsorResponse'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectLinkResponse'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/HackathonsTrackResponse'
    SuggestProjectCategoryRequest:
      type: object
      required:
        - name
        - projectId
      properties:
        name:
          type: string
        projectId:
          $ref: '#/components/schemas/ProjectId'

    CommitteeResponse:
      type: object
      required:
        - id
        - name
        - applicationStartDate
        - applicationEndDate
        - status
        - sponsor
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        applicationStartDate:
          type: string
          format: 'date-time'
        applicationEndDate:
          type: string
          format: 'date-time'
        status:
          $ref: '#/components/schemas/CommitteeStatus'
        sponsor:
          $ref: '#/components/schemas/SponsorResponse'

    CommitteeApplicationResponse:
      type: object
      required:
        - applicationStartDate
        - applicationEndDate
        - projectQuestions
        - status
        - hasStartedApplication
      properties:
        applicationStartDate:
          type: string
          format: 'date-time'
        applicationEndDate:
          type: string
          format: 'date-time'
        projectQuestions:
          type: array
          items:
            $ref: '#/components/schemas/CommitteeProjectQuestionResponse'
        projectInfos:
          $ref: '#/components/schemas/CommitteeProjectInfosResponse'
        status:
          $ref: '#/components/schemas/CommitteeStatus'
        hasStartedApplication:
          type: boolean

    CommitteeStatus:
      type: string
      enum:
        - OPEN_TO_APPLICATIONS
        - OPEN_TO_VOTES
        - CLOSED

    CommitteeProjectInfosResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectLinkResponse'
        - type: object
          properties:
            projectLeads:
              type: array
              items:
                $ref: '#/components/schemas/RegisteredUserResponse'
            longDescription:
              type: string
            shortDescription:
              type: string
            last3monthsMetrics:
              $ref: '#/components/schemas/ProjectLast3MonthsMetricsResponse'

    ProjectLast3MonthsMetricsResponse:
      type: object
      properties:
        activeContributors:
          type: integer
        newContributors:
          type: integer
        contributorsRewarded:
          type: integer
        openIssues:
          type: integer
        contributionsCompleted:
          type: integer
        amountSentInUsd:
          type: number
          format: int64

    CommitteeProjectQuestionResponse:
      type: object
      required:
        - id
        - question
        - required
      properties:
        id:
          type: string
          format: uuid
        question:
          type: string
        answer:
          type: string
        required:
          type: boolean

    CommitteeProjectAnswerRequest:
      type: object
      required:
        - questionId
        - required
      properties:
        questionId:
          type: string
          format: uuid
        answer:
          type: string

    CommitteeApplicationRequest:
      type: object
      required:
        - answers
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/CommitteeProjectAnswerRequest'

    MyCommitteeAssignmentsResponse:
      type: object
      required:
        - projectAssignments
        - name
        - status
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/CommitteeStatus'
        projectAssignments:
          type: array
          items:
            $ref: '#/components/schemas/CommitteeAssignmentLinkResponse'

    CommitteeAssignmentLinkResponse:
      type: object
      required:
        - project
      properties:
        project:
          $ref: '#/components/schemas/ProjectShortResponse'
        score:
          type: number

    MyCommitteeAssignmentResponse:
      type: object
      required:
        - project
        - answers
      properties:
        score:
          type: number
        project:
          $ref: '#/components/schemas/CommitteeProjectInfosResponse'
        answers:
          type: array
          items:
            $ref: '#/components/schemas/CommitteeProjectQuestionResponse'
        votes:
          type: array
          items:
            $ref: '#/components/schemas/CommitteeJuryVoteResponse'

    CommitteeJuryVoteResponse:
      type: object
      required:
        - criteria
        - criteriaId
      properties:
        criteriaId:
          $ref: '#/components/schemas/CommitteeCriteriaId'
        criteria:
          type: string
        vote:
          type: integer

    VoteForCommitteeAssignmentRequest:
      type: object
      required:
        - votes
      properties:
        votes:
          type: array
          items:
            type: object
            required:
              - criteriaId
              - vote
            properties:
              criteriaId:
                $ref: '#/components/schemas/CommitteeCriteriaId'
              vote:
                type: integer

    EcosystemProjectPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - projects
          properties:
            projects:
              type: array
              items:
                $ref: '#/components/schemas/EcosystemProjectPageItemResponse'

    EcosystemProjectPageItemResponse:
      type: object
      required:
        - id
        - slug
        - name
        - shortDescription
        - leaders
        - technologies
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        slug:
          $ref: '#/components/schemas/ProjectSlug'
        name:
          type: string
          example: Verkle Tries
        shortDescription:
          type: string
          example: A short project description
        logoUrl:
          type: string
          format: url
          description: Direct URL to project's logo image
          example: 'https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg'
        topContributors:
          type: array
          items:
            $ref: '#/components/schemas/GithubUserResponse'
        contributorsCount:
          type: integer
        languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageResponse'

    EcosystemContributorsFilter:
      enum:
        - CONTRIBUTION_COUNT
        - TOTAL_EARNED

    EcosystemProjectsSortBy:
      enum:
        - RANK

    SortDirection:
      type: string
      enum:
        - ASC
        - DESC
      default: ASC

    RewardsSort:
      type: string
      enum:
        - REQUESTED_AT
        - CONTRIBUTION
        - AMOUNT
        - STATUS

    RecommendedProjectsPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - projects
          properties:
            projects:
              type: array
              items:
                $ref: '#/components/schemas/ProjectLinkWithDescriptionResponse'

    JourneyCompletionResponse:
      type: object
      required:
        - completed
        - completion
        - billingProfileVerified
        - companyBillingProfileVerified
        - descriptionUpdated
        - telegramAdded
        - rewardReceived
        - rewardClaimed
      properties:
        completed:
          type: boolean
          description: True if the journey is completed
        completion:
          type: number
          format: int32
          description: Completion percentage of the journey
        billingProfileVerified:
          type: boolean
          description: True if the user has at least one verified billing profile
        companyBillingProfileVerified:
          type: boolean
          description: True if the user has at least one verified billing profile of type COMPANY or SELF_EMPLOYED
        descriptionUpdated:
          type: boolean
          description: True if the user has a bio in his profile
        telegramAdded:
          type: boolean
          description: True if the user has filled its telegram contact
        rewardReceived:
          type: boolean
          description: True if the user has been rewarded at least once
        rewardClaimed:
          type: boolean
          description: True if the user has requested the payment for at least one reward

    PublicActivityPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - activities
          properties:
            activities:
              type: array
              items:
                $ref: '#/components/schemas/PublicActivityPageItemResponse'

    PublicActivityPageItemResponse:
      type: object
      required:
        - type
        - timestamp
      properties:
        type:
          $ref: '#/components/schemas/PublicActivityType'
        timestamp:
          type: string
          format: date-time
        pullRequest:
          type: object
          required:
            - project
            - author
          properties:
            project:
              $ref: '#/components/schemas/ProjectLinkResponse'
            author:
              $ref: '#/components/schemas/GithubUserResponse'
        rewardCreated:
          type: object
          required:
            - project
            - recipient
            - amount
          properties:
            project:
              $ref: '#/components/schemas/ProjectLinkResponse'
            recipient:
              $ref: '#/components/schemas/GithubUserResponse'
            amount:
              $ref: '#/components/schemas/NewMoney'
        rewardClaimed:
          type: object
          required:
            - project
            - recipient
            - amount
          properties:
            project:
              $ref: '#/components/schemas/ProjectLinkResponse'
            recipient:
              $ref: '#/components/schemas/GithubUserResponse'
            amount:
              $ref: '#/components/schemas/NewMoney'
        projectCreated:
          type: object
          required:
            - project
            - createdBy
          properties:
            project:
              $ref: '#/components/schemas/ProjectLinkResponse'
            createdBy:
              $ref: '#/components/schemas/GithubUserResponse'

    PublicActivityType:
      type: string
      enum:
        - 'PULL_REQUEST'
        - 'REWARD_CREATED'
        - 'REWARD_CLAIMED'
        - 'PROJECT_CREATED'

    ProjectIssuesSort:
      type: string
      enum:
        - CREATED_AT
        - CLOSED_AT
      default: CREATED_AT

    ProjectIssuesPageResponse:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          required:
            - issues
          properties:
            issues:
              type: array
              items:
                $ref: '#/components/schemas/ProjectIssuesPageItemResponse'
    ProjectIssuesPageItemResponse:
      type: object
      required:
        - id
        - number
        - title
        - status
        - createdAt
        - htmlUrl
        - author
        - repository
        - applicants
        - assignees
      properties:
        id:
          $ref: '#/components/schemas/IssueId'
        number:
          type: integer
          format: int64
          description: Issue number
          example: 6
        title:
          type: string
          description: Issue or pull request title on Github
        status:
          $ref: '#/components/schemas/GithubIssueStatus'
        createdAt:
          type: string
          format: date-time
          description: When the issue was created.
        closedAt:
          type: string
          format: date-time
          description: When the issue was cancelled or closed.
        htmlUrl:
          type: string
          format: url
          description: The public Github URL of the issue.
        author:
          $ref: '#/components/schemas/ContributorResponse'
        repository:
          $ref: '#/components/schemas/ShortGithubRepoResponse'
        applicants:
          type: array
          description: The list of applicants for this issue
          items:
            $ref: '#/components/schemas/GithubUserResponse'
        assignees:
          type: array
          description: The list of assignees for this issue
          items:
            $ref: '#/components/schemas/GithubUserResponse'

    BannerResponse:
      type: object
      required:
        - id
        - text
      properties:
        id:
          $ref: '#/components/schemas/BannerId'
        text:
          type: string
        buttonIconSlug:
          type: string
        buttonText:
          type: string
        buttonLinkUrl:
          type: string
          format: uri

    BannerId:
      type: string
      format: uuid